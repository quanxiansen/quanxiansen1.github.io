{"meta":{"title":"YOLO","subtitle":"You Only Live Once","description":"You Only Live Once","author":"yolo","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"使用Flexible实现手淘H5页面的终端适配","date":"2017-05-18T09:34:43.000Z","updated":"2017-05-18T09:34:43.000Z","comments":true,"path":"2017/05/18/使用Flexible实现手淘H5页面的终端适配/","link":"","permalink":"http://yoursite.com/2017/05/18/使用Flexible实现手淘H5页面的终端适配/","excerpt":"","text":"使用Flexible实现手淘H5页面的终端适配曾几何时为了兼容IE低版本浏览器而头痛，以为到Mobile时代可以跟这些麻烦说拜拜。可没想到到了移动时代，为了处理各终端的适配而乱了手脚。对于混迹各社区的偶，时常发现大家拿手机淘宝的H5页面做讨论——手淘的H5页面是如何实现多终端的适配？ 那么趁此Amfe阿里无线前端团队双11技术连载之际，用一个实战案例来告诉大家，手淘的H5页面是如何实现多终端适配的，希望这篇文章对大家在Mobile的世界中能过得更轻松。 目标 拿一个双11的Mobile页面来做案例，比如你实现一个类似下图的一个H5页面： 目标很清晰，就是做一个这样的H5页面。 前端开发完成终端适配方案 拿到设计师给的设计图之后，剩下的事情是前端开发人员的事了。而手淘经过多年的摸索和实战，总结了一套移动端适配的方案——flexible方案。 这种方案具体在实际开发中如何使用，暂时先卖个关子，在继续详细的开发实施之前，我们要先了解一些基本概念。一些基本概念 在进行具体实战之前，首先得了解下面这些基本概念(术语)： 视窗 viewport 简单的理解，viewport是严格等于浏览器的窗口。在桌面浏览器中，viewport就是浏览器窗口的宽度高度。但在移动端设备上就有点复杂。 移动端的viewport太窄，为了能更好为CSS布局服务，所以提供了两个viewport:虚拟的viewportvisualviewport和布局的viewportlayoutviewport。 George Cummins在Stack Overflow上对这两个基本概念做了详细的解释。 而事实上viewport是一个很复杂的知识点，上面的简单描述可能无法帮助你更好的理解viewport，而你又想对此做更深的了解，可以阅读PPK写的相关教程。 物理像素(physical pixel) 物理像素又被称为设备像素，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。正是这些设备像素的微小距离欺骗了我们肉眼看到的图像效果。 设备独立像素(density-independent pixel) 设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用的虚拟像素(比如说CSS像素)，然后由相关系统转换为物理像素。 CSS像素 CSS像素是一个抽像的单位，主要使用在浏览器上，用来精确度量Web页面上的内容。一般情况之下，CSS像素称为与设备无关的像素(device-independent pixel)，简称DIPs。 屏幕密度 屏幕密度是指一个设备表面上存在的像素数量，它通常以每英寸有多少像素来计算(PPI)。 设备像素比(device pixel ratio) 设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到： 设备像素比 ＝ 物理像素 / 设备独立像素 在JavaScript中，可以通过window.devicePixelRatio获取到当前设备的dpr。而在CSS中，可以通过-webkit-device-pixel-ratio，-webkit-min-device-pixel-ratio和 -webkit-max-device-pixel-ratio进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。 dip或dp,（device independent pixels，设备独立像素）与屏幕密度有关。dip可以用来辅助区分视网膜设备还是非视网膜设备。 缩合上述的几个概念，用一张图来解释： 众所周知，iPhone6的设备宽度和高度为375pt 667pt,可以理解为设备的独立像素；而其dpr为2，根据上面公式，我们可以很轻松得知其物理像素为750pt 1334pt。 如下图所示，某元素的CSS样式： 12width: 2px;height: 2px； 在不同的屏幕上，CSS像素所呈现的物理尺寸是一致的，而不同的是CSS像素所对应的物理像素具数是不一致的。在普通屏幕下1个CSS像素对应1个物理像素，而在Retina屏幕下，1个CSS像素对应的却是4个物理像素。 看到这里，你能感觉到，在移动端时代屏幕适配除了Layout之外，还要考虑到图片的适配，因为其直接影响到页面显示质量，对于如何实现图片适配，再此不做过多详细阐述。这里盗用了@南宮瑞揚根据mir.aculo.us翻译的一张信息图： meta标签 &lt; meta&gt;标签有很多种，而这里要着重说的是viewport的meta标签，其主要用来告诉浏览器如何规范的渲染Web页面，而你则需要告诉它视窗有多大。在开发移动端页面，我们需要设置meta标签如下： 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt; 代码以显示网页的屏幕宽度定义了视窗宽度。网页的比例和最大比例被设置为100%。 留个悬念，因为后面的解决方案中需要重度依赖meta标签。 CSS单位rem 在W3C规范中是这样描述rem的: font size of the root element. 简单的理解，rem就是相对于根元素的font-size来做计算。而我们的方案中使用rem单位，是能轻易的根据的font-size计算出元素的盒模型大小。而这个特色对我们来说是特别的有益处。 前端实现方案 了解了前面一些相关概念之后，接下来我们来看实际解决方案。在整个手淘团队，我们有一个名叫lib-flexible的库，而这个库就是用来解决H5页面终端适配的。lib-flexible是什么？ lib-flexible是一个制作H5适配的开源库，可以点击这里下载相关文件，获取需要的JavaScript和CSS文件。 当然你可以直接使用阿里CDN： 1&lt;script src=&quot;http://g.tbcdn.cn/mtb/lib-flexible/&#123;&#123;version&#125;&#125;/??flexible_css.js,flexible.js&quot;&gt;&lt;/script&gt; 将代码中的换成对应的版本号0.3.4。使用方法 lib-flexible库的使用方法非常的简单，只需要在Web页面的&lt; head&gt;&lt; /head&gt;中添加对应的flexible_css.js,flexible.js文件： 第一种方法是将文件下载到你的项目中，然后通过相对路径添加: 12&lt;script src=&quot;build/flexible_css.debug.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;build/flexible.debug.js&quot;&gt;&lt;/script&gt; 或者直接加载阿里CDN的文件： 1&lt;script src=&quot;http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js&quot;&gt;&lt;/script&gt; 另外强烈建议对JS做内联处理，在所有资源加载之前执行这个JS。执行这个JS后，会在&lt; html&gt;元素上增加一个data-dpr属性，以及一个font-size样式。JS会根据不同的设备添加不同的data-dpr值，比如说2或者3，同时会给html加上对应的font-size的值，比如说75px。 如此一来，页面中的元素，都可以通过rem单位来设置。他们会根据html元素的font-size值做相应的计算，从而实现屏幕的适配效果。 除此之外，在引入lib-flexible需要执行的JS之前，可以手动设置meta来控制dpr值，如： 1&lt;meta name=&quot;flexible&quot; content=&quot;initial-dpr=2&quot; /&gt; 其中initial-dpr会把dpr强制设置为给定的值。如果手动设置了dpr之后，不管设备是多少的dpr，都会强制认为其dpr是你设置的值。在此不建议手动强制设置dpr，因为在Flexible中，只对iOS设备进行dpr的判断，对于Android系列，始终认为其dpr为1。 12345678910111213141516171819if (!dpr &amp;&amp; !scale) &#123; var isAndroid = win.navigator.appVersion.match(/android/gi); var isIPhone = win.navigator.appVersion.match(/iphone/gi); var devicePixelRatio = win.devicePixelRatio; if (isIPhone) &#123; // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案 if (devicePixelRatio &gt;= 3 &amp;&amp; (!dpr || dpr &gt;= 3)) &#123; dpr = 3; &#125; else if (devicePixelRatio &gt;= 2 &amp;&amp; (!dpr || dpr &gt;= 2))&#123; dpr = 2; &#125; else &#123; dpr = 1; &#125; &#125; else &#123; // 其他设备下，仍旧使用1倍的方案 dpr = 1; &#125; scale = 1 / dpr;&#125; flexible的实质 flexible实际上就是能过JS来动态改写meta标签，代码类似这样： 1234567891011var metaEl = doc.createElement(&apos;meta&apos;);var scale = isRetina ? 0.5:1;metaEl.setAttribute(&apos;name&apos;, &apos;viewport&apos;);metaEl.setAttribute(&apos;content&apos;, &apos;initial-scale=&apos; + scale + &apos;, maximum-scale=&apos; + scale + &apos;, minimum-scale=&apos; + scale + &apos;, user-scalable=no&apos;);if (docEl.firstElementChild) &#123; document.documentElement.firstElementChild.appendChild(metaEl);&#125; else &#123; var wrap = doc.createElement(&apos;div&apos;); wrap.appendChild(metaEl); documen.write(wrap.innerHTML);&#125; 事实上他做了这几样事情： 动态改写&lt;meta&gt;标签 给&lt;html&gt;元素添加data-dpr属性，并且动态改写data-dpr的值 给&lt;html&gt;元素添加font-size属性，并且动态改写font-size的值 案例实战 了解Flexible相关的知识之后，咱们回到文章开头。我们的目标是制作一个适配各终端的H5页面。别的不多说，动手才能丰衣足食。 创建HTML模板 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot;&gt; &lt;meta content=&quot;yes&quot; name=&quot;apple-touch-fullscreen&quot;&gt; &lt;meta content=&quot;telephone=no,email=no&quot; name=&quot;format-detection&quot;&gt; &lt;script src=&quot;http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;favicon.png&quot;&gt; &lt;link rel=&quot;Shortcut Icon&quot; href=&quot;favicon.png&quot; type=&quot;image/x-icon&quot;&gt; &lt;title&gt;再来一波&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 页面结构写在这里 --&gt; &lt;/body&gt;&lt;/html&gt; 正如前面所介绍的一样，首先加载了Flexible所需的配置： 1&lt;script src=&quot;http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js&quot;&gt;&lt;/script&gt; 这个时候可以根据设计的图需求，在HTML文档的中添加对应的HTML结构，比如： 123456789101112131415161718&lt;div class=&quot;item-section&quot; data-repeat=&quot;sections&quot;&gt; &lt;div class=&quot;item-section_header&quot;&gt; &lt;h2&gt;&lt;img src=&quot;&#123;brannerImag&#125;&quot; alt=&quot;&quot;&gt;&lt;/h2&gt; &lt;/div&gt; &lt;ul&gt; &lt;li data-repeat=&quot;items&quot; class=&quot;flag&quot; role=&quot;link&quot; href=&quot;&#123;itemLink&#125;&quot;&gt; &lt;a class=&quot;figure flag-item&quot; href=&quot;&#123;itemLink&#125;&quot;&gt; &lt;img src=&quot;&#123;imgSrc&#125;&quot; alt=&quot;&quot;&gt; &lt;/a&gt; &lt;div class=&quot;figcaption flag-item&quot;&gt; &lt;div class=&quot;flag-title&quot;&gt;&lt;a href=&quot;&#123;itemLink&#125;&quot; title=&quot;&quot;&gt;&#123;poductName&#125;&lt;/a&gt;&lt;/div&gt; &lt;div class=&quot;flag-price&quot;&gt;&lt;span&gt;双11价&lt;/span&gt;&lt;strong&gt;¥&#123;price&#125;&lt;/strong&gt;&lt;small&gt;(&#123;preferential&#125;)&lt;/small&gt;&lt;/div&gt; &lt;div class=&quot;flag-type&quot;&gt;&#123;activityType&#125;&lt;/div&gt; &lt;a class=&quot;flag-btn&quot; href=&quot;&#123;shopLink&#125;&quot;&gt;&#123;activeName&#125;&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 为了能更好的测试页面，给其配置一点假数据： 123456789101112131415161718//define datavar pageData = &#123; sections:[&#123; &quot;brannerImag&quot;:&quot;http://xxx.cdn.com/B1PNLZKXXXXXaTXXXXXXXXXXXX-750-481.jpg&quot;, items:[&#123; &quot;itemLink&quot;: &quot;##&quot;, &quot;imgSrc&quot;: &quot;https://placeimg.com/350/350/people/grayscale&quot;, &quot;poductName&quot;:&quot;Carter&apos;s1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093&quot;, &quot;price&quot;: &quot;299.06&quot;, &quot;preferential&quot;: &quot;满400减100&quot;, &quot;activityType&quot;: &quot;1小时内热卖5885件&quot;, &quot;shopLink&quot;:&quot;##&quot;, &quot;activeName&quot;: &quot;马上抢！&quot; &#125; .... &#125;] &#125;]&#125; 把视觉稿中的px转换成rem 读到这里，大家应该都知道，我们接下来要做的事情，就是如何把视觉稿中的px转换成rem。在此花点时间解释一下。 首先，目前日常工作当中，视觉设计师给到前端开发人员手中的视觉稿尺寸一般是基于640px、750px以及1125px宽度为准。甚至为什么？大家应该懂的（考虑Retina屏）。 正如文章开头显示的示例设计稿，他就是一张以750px为基础设计的。那么问题来了，我们如何将设计稿中的各元素的px转换成rem。 目前Flexible会将视觉稿分成100份（主要为了以后能更好的兼容vh和vw），而每一份被称为一个单位a。同时1rem单位被认定为10a。针对我们这份视觉稿可以计算出： 121a = 7.5px1rem = 75px 那么我们这个示例的稿子就分成了10a，也就是整个宽度为10rem，&lt; html&gt;对应的font-size为75px： 这样一来，对于视觉稿上的元素尺寸换算，只需要原始的px值除以rem基准值即可。例如此例视觉稿中的图片，其尺寸是176px 176px,转换成为2.346667rem 2.346667rem。 文本字号不建议使用rem 前面大家都见证了如何使用rem来完成H5适配。那么文本又将如何处理适配。是不是也通过rem来做自动适配。 显然，我们在iPhone3G和iPhone4的Retina屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在Retina屏幕下变小，另外，我们希望在大屏手机上看到更多文本，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是16px和24px，所以我们不希望出现13px和15px这样的奇葩尺寸。 如此一来，就决定了在制作H5的页面中，rem并不适合用到段落文本上。所以在Flexible整个适配方案中，考虑文本还是使用px作为单位。只不过使用[data-dpr]属性来区分不同dpr下的文本字号大小。 1234567891011div &#123; width: 1rem; height: 0.4rem; font-size: 12px; // 默认写上dpr为1的fontSize&#125;[data-dpr=&quot;2&quot;] div &#123; font-size: 24px;&#125;[data-dpr=&quot;3&quot;] div &#123; font-size: 36px;&#125; 为了能更好的利于开发，在实际开发中，我们可以定制一个font-dpr()这样的Sass混合宏 1234567891011@mixin font-dpr($font-size)&#123; font-size: $font-size; [data-dpr=&quot;2&quot;] &amp; &#123; font-size: $font-size * 2; &#125; [data-dpr=&quot;3&quot;] &amp; &#123; font-size: $font-size * 3; &#125;&#125; 有了这样的混合宏之后，在开发中可以直接这样使用： 1@include font-dpr(16px); 当然这只是针对于描述性的文本，比如说段落文本。但有的时候文本的字号也需要分场景的，比如在项目中有一个slogan,业务方希望这个slogan能根据不同的终端适配。针对这样的场景，完全可以使用rem给slogan做计量单位。","categories":[],"tags":[]},{"title":"","slug":"从网易与淘宝的 font-size 思考前端设计稿与工作流","date":"2017-05-18T07:10:23.000Z","updated":"2017-05-18T07:10:23.000Z","comments":true,"path":"2017/05/18/从网易与淘宝的 font-size 思考前端设计稿与工作流/","link":"","permalink":"http://yoursite.com/2017/05/18/从网易与淘宝的 font-size 思考前端设计稿与工作流/","excerpt":"","text":"从网易与淘宝的 font-size 思考前端设计稿与工作流1、问题的引出 最近阅读白树的博文《移动web资源整理》时，他在博文中有一段指出，如果html5要适应各种分辨率的移动设备，应该使用rem这样的尺寸单位，同时给出了一段针对各个分辨率范围在html上设置font-size的代码： 12345678html&#123;font-size:10px&#125;@media screen and (min-width:321px) and (max-width:375px)&#123;html&#123;font-size:11px&#125;&#125;@media screen and (min-width:376px) and (max-width:414px)&#123;html&#123;font-size:12px&#125;&#125;@media screen and (min-width:415px) and (max-width:639px)&#123;html&#123;font-size:15px&#125;&#125;@media screen and (min-width:640px) and (max-width:719px)&#123;html&#123;font-size:20px&#125;&#125;@media screen and (min-width:720px) and (max-width:749px)&#123;html&#123;font-size:22.5px&#125;&#125;@media screen and (min-width:750px) and (max-width:799px)&#123;html&#123;font-size:23.5px&#125;&#125;@media screen and (min-width:800px)&#123;html&#123;font-size:25px&#125;&#125; 在实际项目中，把与元素尺寸有关的css，如width,height,line-height,margin,padding等都以rem作为单位，这样页面在不同设备下就能保持一致的网页布局。举例来说，网页有一个.item类，设置了width为3.4rem，该类在不同分辨率下对应的实际宽度如下： 1234567321px &lt;= device-width &lt;= 375px，font-size:11px ---&gt; .item的width：34px376px &lt;= device-width &lt;= 414px，font-size:12px ---&gt; .item的width：37.4px415px &lt;= device-width &lt;= 639px，font-size:15px ---&gt; .item的width：40.8px640px &lt;= device-width &lt;= 719px，font-size:20px ---&gt; .item的width：51px720px &lt;= device-width &lt;= 749px，font-size:22.5px ---&gt; .item的width：76.5px750px &lt;= device-width &lt;= 799px，font-size:23.5px ---&gt; .item的width：79.8999999px800px &lt;= device-width ，font-size:25px ---&gt; .item的width：85px 以上代码乍看没啥问题，响应式设计不就应该是这么干的吗？但是从工作量和复杂度方面来考虑，它有以下几个不足： （1）.item类在所有设备下的width都是3.4rem，但在不同分辨率下的实际像素是不一样的，所以在有些分辨率下，width的界面效果不一定合适，有可能太宽，有可能太窄，这时候就要对width进行调整，那么就需要针对.item写媒介查询的代码，为该分辨率重新设计一个rem值。然而，这里有7种媒介查询的情况，css又有很多跟尺寸相关的属性，哪个属性在哪个分辨率范围不合适都是不定的，最后会导致要写很多的媒介查询才能适配所有设备，而且在写的时候rem都得根据某个分辨率html的font-size去算，这个计算可不见得每次都那么容易，比如40px / 23.5px，这个rem值口算不出来吧！由此可见这其中的麻烦有多少。 （2）以上代码中给出的7个范围下的font-size不一定是合适的，这7个范围也不一定合适，实际有可能不需要这么多，所以找出这些个范围，以及每个范围最合适的font-size也很麻烦 （3）设计稿都是以分辨率来标明尺寸的，前端在根据设计稿里各个元素的像素尺寸转换为rem时，该以哪个font-size为准呢？这需要去写才能知道。 正是因为以上提到的一些不足，我觉得这种适配方式不是特别好，写起来太麻烦。为了完成工作，我们需要找寻更简单更有效率的方法。那么html5该如何去做众多移动设备的适配呢？ 2. 简单问题简单解决 我觉得有些web app并一定很复杂，比如拉勾网，你看看它的页面在iphone4,iphone6,ipad下的样子就知道了：它的页面有一个特点，就是： 顶部与底部的bar不管分辨率怎么变，它的高度和位置都不变 中间每条招聘信息不管分辨率怎么变，招聘公司的图标等信息都位于条目的左边，薪资都位于右边 这种app是一种典型的弹性布局：关键元素高宽和位置都不变，只有容器元素在做伸缩变换。对于这类app，记住一个开发原则就好：文字流式，控件弹性，图片等比缩放。以图描述： 这个规则是一套基本的适配规则，对于这种简单app来说已经足够，同时它也是后面要说的rem布局的基础。另外对于拉勾这种app可能需要额外媒介查询对布局进行调整的就是小屏幕设备。举例来说，因为现在很多设计稿是根据iphone6的尺寸来的，而iphon6设备宽的逻辑的像素是375px，而iphone4的逻辑像素是320个像素，所以如果你根据设计稿做出来的东西，在iphone4里面可能显示不下，比如说拉钩网底部那个下载框，你对比看下就知道了，这是4： 6： 6下面两边的间距比4多很多，说明拉勾对4肯定是做过适配的，从代码也可以证实这一点： 不过如果你拿到的是根据4的设计稿，那就没有问题，比4分辨率大的设备肯定能显示根据4的尺寸做出来的东西。 还有一点，这种情况css尺寸单位用px就好，不要用rem，避免增加复杂度。 3. 网易的做法先来看看网易在不同分辨率下，呈现的效果： 从上面几张图可以看出，随着分辨率的增大，页面的效果会发生明显变化，主要体现在各个元素的宽高与间距。375680的比320680的导航栏明显要高。能够达到这种效果的根本原因就是因为网易页面里除了font-size之外的其它css尺寸都使用了rem作为单位，比如你看导航栏的高度设置代码： 可是在本文第1部分提到，使用rem布局结合在html上根据不同分辨率设置不同font-size有很多不好解决的麻烦，网易是如何解决的呢？最根本的原因在于，网易页面上html的font-size不是预先通过媒介查询在css里定义好的，而是通过js计算出来的，所以当分辨率发生变化时，html的font-size就会变，不过这得在你调整分辨率后，刷新页面才能看得到效果。你看代码就知道为啥font-size是直接写到html的style上面的了（js设置的原因）： 它是根据什么计算的，这就跟设计稿有关了，拿网易来说，它的设计稿应该是基于iphone4或者iphone5来的，所以它的设计稿竖直放时的横向分辨率为640px，为了计算方便，取一个100px的font-size为参照，那么body元素的宽度就可以设置为width: 6.4rem，于是html的font-size=deviceWidth / 6.4。这个deviceWidth就是viewport设置中的那个deviceWidth。根据这个计算规则，可得出本部分开始的四张截图中html的font-size大小如下： 1234deviceWidth = 320，font-size = 320 / 6.4 = 50pxdeviceWidth = 375，font-size = 375 / 6.4 = 58.59375pxdeviceWidth = 414，font-size = 414 / 6.4 = 64.6875pxdeviceWidth = 500，font-size = 500 / 6.4 = 78.125px 事实上网易就是这么干的，你看它的代码就知道，body元素的宽是： 根据这个可以肯定它的设计稿竖着时的横向分辨率为640。然后你再看看网易在分辨率为320680，375680，414680，500680时，html的font-size是不是与上面计算的一致： 320*680 375*680 414*680 500*680 这个deviceWidth通过document.documentElement.clientWidth就能取到了，所以当页面的dom ready后，做的第一件事情就是： 1document.documentElement.style.fontSize = document.documentElement.clientWidth / 6.4 + &apos;px&apos;; 这个6.4怎么来的，当然是根据设计稿的横向分辨率/100得来的。下面总结下网易的这种做法： （1）先拿设计稿竖着的横向分辨率除以100得到body元素的宽度： 12如果设计稿基于iphone6，横向分辨率为750，body的width为750 / 100 = 7.5rem如果设计稿基于iphone4/5，横向分辨率为640，body的width为640 / 100 = 6.4rem （2）布局时，设计图标注的尺寸除以100得到css中的尺寸，比如下图： 播放器高度为210px，写样式的时候css应该这么写：height: 2.1rem。之所以取一个100作为参照，就是为了这里计算rem的方便！ （3）在dom ready以后，通过以下代码设置html的font-size: 1document.documentElement.style.fontSize = document.documentElement.clientWidth / 6.4 + &apos;px&apos;; 6.4只是举个例子，如果是750的设计稿，应该除以7.5。 （4）font-size可能需要额外的媒介查询，并且font-size不能使用rem，如网易的设置： 1234567891011@media screen and (max-width:321px)&#123; .m-navlist&#123;font-size:15px&#125;&#125;@media screen and (min-width:321px) and (max-width:400px)&#123; .m-navlist&#123;font-size:16px&#125;&#125;@media screen and (min-width:400px)&#123; .m-navlist&#123;font-size:18px&#125;&#125; 最后还有2个情况要说明： 第一，如果采用网易这种做法，视口要如下设置： 1&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt; 第二，当deviceWidth大于设计稿的横向分辨率时，html的font-size始终等于横向分辨率/body元素宽： 640*680 641*680 之所以这么干，是因为当deviceWidth大于640时，则物理分辨率大于1280（这就看设备的devicePixelRatio这个值了），应该去访问pc网站了。事实就是这样，你从手机访问网易，看到的是触屏版的页面，如果从pad访问，看到的就是电脑版的页面。如果你也想这么干，只要把总结中第三步的代码稍微改一下就行了： 123var deviceWidth = document.documentElement.clientWidth;if(deviceWidth &gt; 640) deviceWidth = 640;document.documentElement.style.fontSize = deviceWidth / 6.4 + &apos;px&apos;; 4. 淘宝的做法 看看淘宝在不同分辨率下，呈现的效果： 淘宝的效果跟网易的效果其实是类似的，随着分辨率的变化，页面元素的尺寸和间距都相应变化，这是因为淘宝的尺寸也是使用了rem的原因。在介绍它的做法之前，先来了解一点关于viewport的知识，通常我们采用如下代码设置viewport: 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; 这样整个网页在设备内显示时的页面宽度就会等于设备逻辑像素大小，也就是device-width。这个device-width的计算公式为： 设备的物理分辨率/(devicePixelRatio * scale)，在scale为1的情况下，device-width = 设备的物理分辨率/devicePixelRatio 。 devicePixelRatio称为设备像素比，每款设备的devicePixelRatio都是已知，并且不变的，目前高清屏，普遍都是2，不过还有更高的，比如2.5, 3 等，我魅族note的手机的devicePixelRatio就是3。淘宝触屏版布局的前提就是viewport的scale根据devicePixelRatio动态设置： 在devicePixelRatio为2的时候，scale为0.5 在devicePixelRatio为3的时候，scale为0.3333 这么做目的当然是为了保证页面的大小与设计稿保持一致了，比如设计稿如果是750的横向分辨率，那么实际页面的device-width，以iphone6来说，也等于750，这样的话设计稿上标注的尺寸只要除以某一个值就能够转换为rem了。通过js设置viewport的方法如下： 12var scale = 1 / devicePixelRatio;document.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;).setAttribute(&apos;content&apos;,&apos;initial-scale=&apos; + scale + &apos;, maximum-scale=&apos; + scale + &apos;, minimum-scale=&apos; + scale + &apos;, user-scalable=no&apos;); 淘宝布局的第二个要点，就是html元素的font-size的计算公式，font-size = deviceWidth / 10： 接下来要解决的问题是，元素的尺寸该如何计算，比如说设计稿上某一个元素的宽为150px，换算成rem应该怎么算呢？这个值等于设计稿标注尺寸/该设计稿对应的html的font-size。拿淘宝来说的，他们用的设计稿是750的，所以html的font-size就是75，如果某个元素时150px的宽，换算成rem就是150 / 75 = 2rem。总结下淘宝的这些做法： （1）动态设置viewport的scale 12var scale = 1 / devicePixelRatio;document.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;).setAttribute(&apos;content&apos;,&apos;initial-scale=&apos; + scale + &apos;, maximum-scale=&apos; + scale + &apos;, minimum-scale=&apos; + scale + &apos;, user-scalable=no&apos;); （2）动态计算html的font-size 1document.documentElement.style.fontSize = document.documentElement.clientWidth / 10 + &apos;px&apos;; （3）布局的时候，各元素的css尺寸=设计稿标注尺寸/设计稿横向分辨率/10 （4）font-size可能需要额外的媒介查询，并且font-size不使用rem，这一点跟网易是一样的。 最后还有一个情况要说明，跟网易一样，淘宝也设置了一个临界点，当设备竖着时横向物理分辨率大于1080时，html的font-size就不会变化了，原因也是一样的，分辨率已经可以去访问电脑版页面了。 关于这种做法的具体实现，淘宝已经给我们提供了一个开源的解决方案，具体请查看： 淘宝开源解决方案 5. 比较网易与淘宝的做法 共同点： 都能适配所有的手机设备，对于pad，网易与淘宝都会跳转到pc页面，不再使用触屏版的页面 都需要动态设置html的font-size 布局时各元素的尺寸值都是根据设计稿标注的尺寸计算出来，由于html的font-size是动态调整的，所以能够做到不同分辨率下页面布局呈现等比变化 容器元素的font-size都不用rem，需要额外地对font-size做媒介查询 都能应用于尺寸不同的设计稿，只要按以上总结的方法去用就可以了 不同点 淘宝的设计稿是基于750的横向分辨率，网易的设计稿是基于640的横向分辨率，还要强调的是，虽然设计稿不同，但是最终的结果是一致的，设计稿的尺寸一个公司设计人员的工作标准，每个公司不一样而已 淘宝还需要动态设置viewport的scale，网易不用 最重要的区别就是：网易的做法，rem值很好计算，淘宝的做法肯定得用计算器才能用好了 。不过要是你使用了less和sass这样的css处理器，就好办多了，以淘宝跟less举例，我们可以这样编写less： 12345678910111213//定义一个变量和一个mixin@baseFontSize: 75;//基于视觉稿横屏尺寸/100得出的基准font-size.px2rem(@name, @px)&#123; @&#123;name&#125;: @px / @baseFontSize * 1rem;&#125;//使用示例：.container &#123; .px2rem(height, 240);&#125;//less翻译结果：.container &#123; height: 3.2rem;&#125;","categories":[],"tags":[]},{"title":"","slug":"纯CSS实现瀑布流布局","date":"2017-05-17T06:53:04.000Z","updated":"2017-05-17T06:53:04.000Z","comments":true,"path":"2017/05/17/纯CSS实现瀑布流布局/","link":"","permalink":"http://yoursite.com/2017/05/17/纯CSS实现瀑布流布局/","excerpt":"","text":"纯CSS实现瀑布流布局当初要实现这样的布局都是依赖于JavaScript来实现，所以当时出现过很多实现瀑布流布局的插件。比如Masonry、Isotope等都是非常有名的插件。但使用纯CSS来实现，当时还是非常困难的，不管是使用float还是inline-block布局都无法很好的控制列表项目堆栈之间的间距。最终得到的效果就像下面这样： Multi-columns 首先最早尝试使用纯CSS方法解决瀑布流布局的是CSS3 的Multi-columns。其最早只是用来用来实现文本多列排列（类似报纸杂志样的文本排列）。但对于前端同学来说，他们都是非常具有创意和创新的，有人尝试通过Multi-columns相关的属性column-count、column-gap配合break-inside来实现瀑布流布局。比如我们有一个类似这样的HTML结构: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;div class=&quot;masonry&quot;&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--small&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--medium&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--small&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--medium&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--large&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--medium&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--small&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--large&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--small&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--large&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--medium&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--small&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--medium&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item__content item__content--small&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; css 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071body, html &#123; position: relative; width: 100%; height: 100%; font-family: &quot;PT Mono&quot;, monospace; &#125; .masonry &#123; column-count: 1; column-gap: 0; counter-reset: item-counter; &#125; @media screen and (min-width: 400px) &#123; .masonry&#123; column-count: 2; &#125; &#125; @media screen and (min-width: 600px) &#123; .masonry&#123; column-count:3; &#125; &#125; @media screen and (min-width: 800px) &#123; .masonry&#123; column-count: 4; &#125; &#125; @media screen and (min-width: 1100px) &#123; .masonry&#123; column-count:5; &#125; &#125; .item &#123; box-sizing: border-box; break-inside: avoid; padding: 10px; counter-increment: item-counter; &#125; .item__content &#123; position: relative; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 220px; font-size: 40px; color: #4F000B; background: currentColor; box-sizing: border-box; &#125; .item__content:before &#123; position: absolute; top: 0; left: 0; font-size: 13px; width: 2em; height: 2em; line-height: 2em; text-align: center; font-weight: bold; background-color:#222; &#125; .item__content:after &#123; color: #FFC093; content: &apos;♥◡♥&apos;; &#125; 效果 Flexbox","categories":[],"tags":[]},{"title":"","slug":"flow-root","date":"2017-05-09T07:00:59.000Z","updated":"2017-05-09T07:00:59.000Z","comments":true,"path":"2017/05/09/flow-root/","link":"","permalink":"http://yoursite.com/2017/05/09/flow-root/","excerpt":"","text":"flow-root简单来说就是用来清除浮动 用在父元素 元素容器会生成一个块盒子，并且块盒子里的内容是使用流布局。它总是为它建立一个新的块格式化上下文内容。如果你对CSS中浮动有所了解之后，你不难发现，容器里的元素浮动之后，会造成容器的坍塌现象之类的。 通过clearfix之后，能让其变得正常：看到这里，或许你知道flow-root的特性是什么了。其实正如你所想的一样：flow-root是最新一种创建BFC的属性。正因为如此，大多数人都认为flow-root就是一个简单的clearfix黑魔法，也有很多人说他是最新清除浮动的最简易方案。但这个特性其实真的很有实用性。 使用display:flow-root 今天开始你可以使用display:flow-root。这周Firefox 53和Chrome 58两大主流浏览器在这周都发布相关消息：支持flow-root属性值。 来看一个简单的示例，比如我们一个这样的结构： 1234&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;floatElement&quot;&gt;浮动元素&lt;/div&gt; &lt;div class=&quot;floatElement&quot;&gt;浮动元素&lt;/div&gt;&lt;/div&gt; 我们的CSS是这样的： 1.floatElement&#123; float: left; /*或者right*/ &#125; 如果仅这样操作，都会造成容器wrapper的高度塌陷。以前我们都是通过clearfix的方案（最常用的吧）来解决： 12345.wrapper::after &#123; content:&apos;&apos;; display: table; clear: both &#125; 上面的解决方案都是老的，其实今天我们可以在.wrapper容器上这样使用就可以达到类似clearfix的效果： 1.wrapper&#123; display: flow-root;&#125; 虽然主流浏览器Firefox 53+、Chrome 58+和Opera 45+都支持flow-root属性(有关于浏览器对该属性的兼容性，可以通过Caniuse.com来查询)。但实际当中，我们必竟有很多业务需求是需要兼容一些低版本的。对于一位CSS的极度爱好者，总是喜欢在项目中不断的尝试使用一些新特性。为了更好对flow-root做降级处理，我们可以通过CSS的条件属性@supports()来做相应的处理。比如上面的代码我们可以这样使用： 12345.floatElement&#123; float: left; /*或者right*/ &#125; .wrapper::after &#123; content:&apos;&apos;; display: table; clear: both &#125; @supports(display:flow-root)&#123; .wrapper&#123; display: flow-root; &#125; &#125; 当然你还可以把这样使用： 123.floatElement&#123; float: left; /*或者right*/ &#125; @supports not (display:flow-root) &#123; .wrapper::after &#123; content: &apos;&apos;; display: table; clear:both; &#125; &#125;","categories":[],"tags":[]},{"title":"","slug":"CSS Grid布局","date":"2017-05-08T09:55:19.000Z","updated":"2017-05-08T09:55:19.000Z","comments":true,"path":"2017/05/08/CSS Grid布局/","link":"","permalink":"http://yoursite.com/2017/05/08/CSS Grid布局/","excerpt":"","text":"CSS Grid布局比如一个这样的HTML结构： 123456&lt;div class=&quot;grid-container&quot;&gt; &lt;div class=&quot;grid-items&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items&quot;&gt;&lt;/div&gt; &lt;/div&gt; 使用 CSS Grid布局首要的第一步，就是通过display:grid;来对容器声明一个网格容器，那么这个div元素里面对应的子元素就自动成为网格项目。 虽然你在div.grid-container中设置了display:grid;，声明了这个元素为Grid容器，但在浏览器中，并看不到有任何的变化。但在在幕后中，他们还是发生了变化，div.grid-container是一个Grid容器，他的所有子元素就自动变成了网格项目。 接下来，使用grid-template-columns: 1fr 1fr 1fr;来定义三列网格：再给.grid-container中添加grid-gap:5px：看到变化了吧，整个网格分了三个列，单元格之间有5px的间距，同时每列的列宽是整个宽度的三分之一，那是因为我们采用了fr单位，而且把整个网格分成了三列，每列的宽度是1fr。这里告诉我们三个知识点： grid-template-columns用来把网格指定列的宽度 grid-gap用来指定列（或行）的间距 fr可以自动根据网格容器的宽度来计算列的宽度 现在我们把grid-template-columns的值改成：1fr 2fr 1fr，对应的效果就会变成现在第二列的宽度是第一列和最后一列的两倍。这也再次证明fr单位的强大之处，使用它可以让你很容易定义你的网格尺寸。 现在越来越接近我们想要的网格。但需求是不断变化的，比如我们现在想让顶部的第一行尽可能的宽，比如说跨整个网格列（比如我们网页的头部，或者说我们常见的导航）。如此一来，只需要在第一个网格上使用grid-column: 1 / 4： 或许第一次接触1 / 4会令你感到神秘，其实这个涉及到了CSS Grid中的重要概念之一，那就是网格线，其中第一个数字是列的起始网格线位置，第二个数字是线束网格线的位置。对于一个CSS Grid，可以通过grid-template-columns创建列网格线，grid-template-rows创建行网格线。这种方式创建的是一种显式的网格线。当然，除了这种方式，还可以创建隐式网格线。除此之外，还可以使用grid-auto-rows和grid-auto-columns可以创建一个隐式网格。这个隐式网格对应的网格线就被称之为隐式网格线。 接下来，我们想要有一个侧边栏，并且让他的位置是垂直方向的2 / 3。我们可以使用grid-row: 2 / 4来实现，这个特性和grid-column非常的类似。这个时候，效果变成这样： 其实CSS Grid看上去和表格非常的类似，在表格中我们有一个专业的术语，合并单元格。其实在CSS Grid布局中，我们同样有一个类似的特性，那就是在grid-column或者grid-row中引入关键词span，在关键词span后面紧跟一个数值，就是表示合并单元格的数量，先来看下图： 上面的示例中，我们使用到了grid-column: 2 / span 1和grid-row: 2 / span 2。其中grid-column: 2 / span 1表示从列网格线2开始，跨度是1个列网格线（其实就是合并一个列单元格）。而grid-row: 2 / span 2表示的是从行网格线2开始，跨度是两个两个线（其实就是合并两个行单元格）。 接着我们来做页脚，在做页脚之前，我们先删除两个网格项目，因为不需要他们了。做页脚和做页头非常的类似，继续使用grid-column: 1 / 4即可： 通过上面的方式，我们可以轻易的控制网格，也能非常容易的实现一个Web面页的布局，比如一个三列的布局。但我们在布局中经常还需要控制对齐方式，特别是在CSS Grid的布局当中，比如下面的示例中，我们第三列并未占满整个高度，这个时候希望它能底部对齐。此时为了实现这样的效果，需要使用到CSS中的对齐模块特性，比如在这里，我们可以使用align-self: end来实现： align-self是CSS中的一个新模块特性Box Alignment中的一个属性。如果你对上面的相关知识有所了解的话，你就可以很轻易的使用CSS Grid相关知识实现一个常用的Web页面布局效果。比如下面这张图，为了好完，我把主内容的容器设置了具体的宽度，并且通过Box Alignment属性，让这个区域水平垂直居中： 12345678.grid-items.three&#123; grid-column: 2 / span 1; grid-row:2 / span 2; width:300px; height:100px; justify-self: center; align-self: center; &#125; 整个示例的代码css12345678910111213141516171819202122232425262728293031323334&lt;style&gt; .grid-container&#123; display: grid; grid-template-columns: 1fr 2fr 1fr; grid-gap:5px; height:500px; &#125; .grid-items&#123; background: lawngreen; &#125; .grid-items.one&#123; grid-column: 1 / 4; &#125; .grid-items.two&#123; /*height:300px;*/ grid-row: 2 /4; &#125; .grid-items.three&#123; grid-column: 2 / span 1; grid-row:2 / span 2; width:300px; height:100px; justify-self: center; align-self: center; &#125; .grid-items.four&#123; grid-column: 1 / 4; &#125; .grid-items.five&#123; grid-row: 2/4; height:100px; align-self: end; &#125; &lt;/style&gt; html 1234567&lt;div class=&quot;grid-container&quot;&gt; &lt;div class=&quot;grid-items one&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items two&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items three&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items five&quot;&gt;&lt;/div&gt; &lt;div class=&quot;grid-items four&quot;&gt;&lt;/div&gt; &lt;/div&gt;","categories":[],"tags":[]},{"title":"","slug":"ajax动态添加数据","date":"2017-04-12T09:58:27.000Z","updated":"2017-04-12T09:58:27.000Z","comments":true,"path":"2017/04/12/ajax动态添加数据/","link":"","permalink":"http://yoursite.com/2017/04/12/ajax动态添加数据/","excerpt":"","text":"配置ngnix nginx/conf_nix.d/global.conf 所有root都改为相对路径/Users/liuyang/zpmgr-newui/WebContent; nginx/conf_nix.d/mgr.conf;同上 nginx/conf_nix.d/mgrser.conf 服务器地址修改 修改reloadNginx.sh/startNginx.sh/stopNginx.sh 文件修改 reloadNginx.sh123basename=$(cd `dirname $0`; pwd)echo $basenamesudo nginx -s reload -c $basename/nginx_nix.conf startNginx.sh 123basename=$(cd `dirname $0`; pwd)echo $basenamesudo nginx -c $basename/nginx_nix.conf stopNginx.sh 123basename=$(cd `dirname $0`; pwd)echo $basenamesudo nginx -s stop -c $basename/nginx_nix.conf 在终端 启动nginx 1sh startNginx.sh 修改nginx文件后，在终端需要执行命令 1sh reloadNginx.sh 修改增加，删减文件夹，在根目录执行gulp","categories":[],"tags":[]},{"title":"","slug":"CSS 规范","date":"2017-04-07T09:45:59.000Z","updated":"2017-04-07T09:45:59.000Z","comments":true,"path":"2017/04/07/CSS 规范/","link":"","permalink":"http://yoursite.com/2017/04/07/CSS 规范/","excerpt":"","text":"CSS 规范CSS 文档分析无论编写什么文档，我们都应当尽力维持统一的风格，包括统一的注释、统一的语法与统一的命名规范。 总则尽量将行宽控制在 80 字节以下。渐变（gradient）相关的语法以及注释中的 URL 等可以算作例外，毕竟这部分我们也无能为力。 单一文件与多文件有人喜欢在一份文件文件中编写所有的内容，而我在迁移至 Sass 之后开始将样式拆分成多个小文件。这都是很好的做法。无论你选择哪种，下文的规则都将适用，而且如果你遵守这些规则的话你也不会遇到什么问题。这两种写法的区别仅仅在于目录以及区块标题。 目录在 CSS 的开头，我会写一份目录，例如： 12345678/*------------------------------------*\\ $CONTENTS\\*------------------------------------*//** * CONTENTS............You’re reading it! * RESET...............Set our reset defaults * FONT-FACE...........Import brand font files */ 这份目录可以告诉其他开发者这个文件中具体含有哪些内容。这份目录中的每一项都与其对应的区块标题相同。 如果你在维护一份单文件 CSS，对应的区块将也在同一文件中。如果你是在编写一组小文件，那么目录中的每一项应当对应相应的 @include 语句。 区块标题目录应当对应区块的标题。请看如下示例 123/*------------------------------------*\\ $RESET\\*------------------------------------*/ 区块标题前缀 $ 可以让我们使用 [Cmd|Ctrl]+F 命令查找标题名的同时将搜索范围限制在区块标题中。如果你在维护一份大文件，那么在区块之间空 5 行，如下： 1234567891011121314/*------------------------------------*\\ $RESET\\*------------------------------------*/[Ourresetstyles]/*------------------------------------*\\ $FONT-FACE\\*------------------------------------*/ 在大文件中快速翻动时这些大块的空档有助于区分区块。 如果你在维护多份、以 @include 连接的 CSS 的话，在每份文件头加上标题即可，不必这样空行。 代码顺序 尽量按照特定顺序编写规则，这将确保你充分发挥 CSS 缩写中第一个 C 的意义：cascade，层叠。 一份规划良好的 CSS 应当按照如下排列： Reset 万物之根源 元素类型 没有 class 的 h1、ul 等 对象以及抽象内容 最一般、最基础的设计模式 子元素 由对象延伸出来的所有拓展及其子元素 修补 针对异常状态 如此一来，当你依次编写 CSS 时，每个区块都可以自动继承在它之前区块的属性。这样就可以减少代码相互抵消的部分，减少某些特殊的问题，组成更理想的 CSS 结构。 CSS 规则集分析 1234[选择器]&#123; [属性]:[值]; [&lt;- 声明 -&gt;]&#125; 编写 CSS 样式时，习惯遵守这些规则： class 名称以连字符（-）连接，除了下文提到的 BEM 命名法； 缩进 4 空格； 声明拆分成多行； 声明以相关性顺序排列，而非字母顺序； 有前缀的声明适当缩进，从而对齐其值； 缩进样式从而反映 DOM； 保留最后一条声明结尾的分号。 1234567891011121314151617.widget&#123; padding:10px; border:1px solid #BADA55; background-color:#C0FFEE; -webkit-border-radius:4px; -moz-border-radius:4px; border-radius:4px;&#125; .widget-heading&#123; font-size:1.5rem; line-height:1; font-weight:bold; color:#BADA55; margin-right:-10px; margin-left: -10px; padding:0.25em; &#125; 我们可以发现，.widget-heading 是 .widget 的子元素，因为前者比后者多缩进了一级。这样通过缩进就可以让开发者在阅读代码时快速获取这样的重要信息。 我们还可以发现 .widget-heading 的声明是根据其相关性排列的：.widget-heading 是行间元素，所以我们先添加字体相关的样式声明，接下来是其它的。 命名规范 一般情况下我都是以连字符（-）连接 class 的名字（例如 .foo-bar 而非 .foo_bar 或 .fooBar），不过在某些特定的时候我会用 BEM（Block, Element, Modifier）命名法。 BEM 命名法可以使得选择器更规范，更清晰，更具语义。 该命名法按照如下格式： 123.block&#123;&#125;.block__element&#123;&#125;.block--modifier&#123;&#125; 其中： .block 代表某个基本的抽象元素； .block__element 代表 .block 这一整体的一个子元素； .block--modifier 代表 .block 的某个不同状态。 12345.person&#123;&#125;.person--woman&#123;&#125; .person__hand&#123;&#125; .person__hand--left&#123;&#125; .person__hand--right&#123;&#125; 这个例子中我们描述的基本元素是一个人，然后这个人可能是一个女人。我们还知道人拥有手，这些是人体的一部分，而手也有不同的状态，如同左手与右手。 这样我们就可以根据亲元素来划定选择器的命名空间并传达该选择器的职能，这个选择器是一个子元素（__）还是亲元素的不同状态（–）？ 由此，.page-wrapper 是一个独立的选择器。这是一个符合规范的命名，因为它不是其它元素的子元素或其它状态；然而 .widget-heading 则与其它对象有关联，它应当是 .widget 的子元素，所以我们应当将其重命名为 .widget__heading。 BEM 命名法虽然不太好看，而且相当冗长，但是它使得我们可以通过名称快速获知元素的功能和元素之间的关系。与此同时，BEM 语法中的重复部分非常有利于 gzip 的压缩算法。 无论你是否使用 BEM 命名法，你都应当确保 class 命名得当，力保一字不多、一字不少；将元素命名抽象化以提高复用性（例如 .ui-list，.media）。由此延伸出去的元素命名则要尽量精准（例如 .user-avatar-link）。不用担心 class 名的数量或长度，因为写得好的代码 gzip 也能有效压缩。 HTML 中的 class 为了确保易读性，在 HTML 标记中用两个空格隔开 class 名，例如： 1&lt;div class=&quot;foo--bar bar__baz&quot;&gt; 增加的空格应当可以使得在使用多个 class 时更易阅读与定位。 JavaScript 钩子 千万不要把 CSS 样式用作 JavaScript 钩子。把 JS 行为与样式混在一起将无法对其分别处理。 如果你要把 JS 和某些标记绑定起来的话，写一个 JS 专用的 class。简单地说就是划定一个前缀 .js- 的命名空间，例如 .js-toggle，.js-drag-and-drop。这意味着我们可以通过 class 同时绑定 JS 和 CSS 而不会因为冲突而引发麻烦。 12&lt;th class=&quot;is-sortable js-is-sortable&quot;&gt;&lt;/th&gt; 上面的这个标记有两个 class，你可以用其中一个来给这个可排序的表格栏添加样式，用另一个添加排序功能。 注释 12345678910111213/** * 这是一个文档块（DocBlock）风格的注释。 * * 这里开始是描述更详细、篇幅更长的注释正文。当然，我们要把行宽控制在 80 字以内。 * * 我们可以在注释中嵌入 HTML 标记，而且这也是个不错的办法： * &lt;div class=foo&gt; &lt;p&gt;Lorem&lt;/p&gt; &lt;/div&gt; * * 如果是注释内嵌的标记的话，在它前面不加星号，否则会被复制进去。 */ 在注释中应当尽量详细描述代码，因为对你来说清晰易懂的内容对其他人可能并非如此。每写一部分代码就要专门写注释以详解。 注释的拓展用法 注释有许多很先进的用法，例如： 准修饰选择器 代码标签 继承标记 准修饰选择器： 你应当避免过分修饰选择器，例如如果你能写 .nav{} 就尽量不要写 ul.nav{}。过分修饰选择器将影响性能，影响 class 复用性，增加选择器私有度。这些都是你应当竭力避免的。 不过有时你可能希望告诉其他开发者 class 的使用范围。以 .product-page 为例，这个 class 看起来像是一个根容器，可能是 html 或者 body 元素，但是仅凭 .product-page 则无法判断。 我们可以在选择器前加上准修饰（即将前面的类型选择器注释掉）来描述我们规划的 class 作用范围： 1/*html*/.product-page&#123;&#125; 这样我们就能准确获知该 class 的作用范围而不会影响复用性。 123/*ol*/.breadcrumb&#123;&#125;/*p*/.intro&#123;&#125;/*ul*/.image-thumbs&#123;&#125; 代码标签 如果你写了一个新规则的话，可以在它上面加上标签，例如： 123456789/** * ^navigation ^lists */.nav&#123;&#125;/** * ^grids ^lists ^tables */.matrix&#123;&#125; 这些标签可以使得其他开发者快速找到相关代码。如果一个开发者需要查找和列表相关的部分，他只要搜索 ^lists 就能快速定位到 .nav，.matrix 以及其它相关部分。 继承标记 将面向对象的思路用于 CSS 编写的话，你经常能找到两部分 CSS 密切相关（其一为基础，其一为拓展）却分列两处。我们可以用继承标记来在原元素和继承元素之间建立紧密联系。这些在注释中的写法如下： 在元素的基本样式中： 1234/** * Extend `.foo` in theme.css */ .foo&#123;&#125; 在元素的拓展样式中： 1234/** * Extends `.foo` in base.css */ .bar&#123;&#125; 这样一来我们就能在两块相隔很远的代码间建立紧密联系。 面向对象 CSS 我以面向对象 CSS 的方式写代码。我把组件分成结构（对象）与外观（拓展）。正如以下分析： 12345.room&#123;&#125;.room--kitchen&#123;&#125;.room--bedroom&#123;&#125;.room--bathroom&#123;&#125; 我们在屋子里有许多房间，它们都有共同的部分：它们都包含地板、天花板、墙壁和门。这些共享的部分我们可以放到一个抽象的 .room{} class 中。不过我们还有其它与众不同的房间：一个厨房可能有地砖，卧室可能有地毯，洗手间可能没有窗户但是卧室会有，每个房间的墙壁颜色也许也会不一样。面向对象 CSS 的思路使得我们把相同部分抽象出来组成结构部分，然后用更具体的 class 来拓展这些特征并添加特殊的处理方法。 所以比起编写大量的特殊模块，应当努力找出这些模块中重复的设计模式并将其抽象出来，写成一个可以复用的 class，将其用作基础然后编写其它拓展模块的特殊情形。 当你要编写一个新组件时，将其拆分成结构和外观。编写结构部分时用最通用 class 以保证复用性，编写外观时用更具体的 class 来添加设计方法。 布局 所有组件都不要声明宽度，而由其亲元素或格栅系统来决定。 坚决不要声明高度。高度应当仅仅用于尺寸已经固定的东西，例如图片和 CSS Sprite。在 p，ul，div 等元素上不应当声明高度。如果需要的话可以写 line-height，这个更加灵活。 格栅系统应当当作书架来理解。是它们容纳内容，而不是把它们本身当成内容装起来，正如你先搭起书架再把东西放进去。比起声明它们的尺寸，把格栅系统和元素的其它属性分来开处理更有助于布局，也使得我们的前端工作更高效。 你在格栅系统上不应当添加任何样式，他们仅仅是为布局而用。在格栅系统内部再添加样式。在格栅系统中任何情况下都不要添加盒模型相关属性。 UI 尺寸 我用很多方法设定 UI 尺寸，包括百分比，px，em，rem 以及干脆什么都不用。 理想情况下，格栅系统应当用百分比设定。如上所述，因为我用格栅系统来固定栏宽和页宽，所以我可以不用理会元素的尺寸。 我用 rem 定义字号，并且辅以 px 以兼容旧浏览器。这可以兼具 em 和 px 的优势。下面是一个非常漂亮的 Sass Mixin，假设你在别处声明了基本字号（base-font-size）的话，用它就可以生成 rem 以及兼容旧浏览器的 px。 1234@mixin font-size($font-size)&#123; font-size:$font-size +px; font-size:$font-size / $base-font-size +rem;&#125; 简写 CSS 简写应当谨慎使用。 编写像 background:red; 这样的属性的确很省事，但是你这么写的意思其实是同时声明 background-image:none; background-position:top left; background-repeat: repeat; background-color:red;。虽然大多数时候这样不会出什么问题，但是哪怕只出一次问题就值得考虑要不要放弃简写了。这里应当改为 background-color:red;。 类似的，像 margin:0; 这样的声明的确简洁清爽，但是还是应当尽量写清楚。如果你只是想修改底边边距，就要具体一些，写成 margin-bottom:0;。 反过来，你需要声明的属性也要写清楚，不要因为简写而波及其它属性。例如如果你只想改掉底部的 margin，那就不要用会把其它边距也清零的 margin:0。 简写虽然是好东西，但是注意切勿滥用。 ID 在我们开始处理选择器之前，牢记这句话： 在 CSS 里坚决不要用 ID。 在 HTML 里 ID 可以用于 JS 以及锚点定位，但是在 CSS 里只要用 class，一个 ID 也不要用。 Class 的优势在于复用性，而且私有度也并不高。私有度非常容易导致问题，所以将其降低就尤为重要。ID 的私有度是 class 的 255 倍，所以在 CSS 中坚决不要使用。 选择器 务必保持选择器简短高效。 通过页面元素位置而定位的选择器并不理想。例如 .sidebar h3 span{} 这样的选择器就是定位过于依赖相对位置，所以把 span 移到 h3 和 sidebar 外面时就很难保持其样式。 结构复杂的选择器将会影响性能。选择器结构越复杂（如 .sidebar h3 span 为三层，.content ul p a 是四层），浏览器的消耗就越大。 尽量使得样式不依赖于其定位，尽量保持选择器简洁清晰。 作为一个整体，选择器应当尽量简短（例如只有一层结构），但是 class 名则不应当过于简略，例如 .user-avatar 就远比 .usr-avt 好。 牢记：class 无所谓是否语义化；应当关注它们是否合理。不要强调 class 名要符合语义，而要注重使用合理且不会过时的名称。 过度修饰的选择器 由前文所述，过度修饰的选择器并不理想。 过度修饰的选择器是指像 div.promo 这样的。很可能你只用 .promo 也能得到相同的效果。当然你可能偶尔会需要用元素类型来修饰 class（例如你写了一个 .error 而且想让它在不同的元素类型中显示效果不一样，例如 .error{ color:red; } div.error{ padding:14px;}），但是大多数时候还是应当尽量避免。 再举一个修饰过度的选择器例子，ul.nav li a{}。如前文所说，我们马上就可以删掉 ul 因为我们知道 .nav 是个列表，然后我们就可以发现 a 一定在 li 中，所以我们就能将这个选择器改写成 .nav a{}。 选择器性能 虽然浏览器性能日渐提升，渲染 CSS 速度越来越快，但是你还是应当关注效率。使用间断、没有嵌套的选择器，不把全局选择器（*{}）用作核心选择器，避免使用日渐复杂的 CSS3 新选择器可以避免这样的问题。 译注，核心选择器：浏览器解析选择器为从右向左的顺序，最右端的元素是样式生效的元素，是为核心选择器。 使用 CSS 选择器的目的 比起努力运用选择器定位到某元素，更好的办法是直接给你想要添加样式的元素直接添加一个 class。我们以 .header ul{} 这样一个选择器为例。 假定这个 ul 就是这个网站的全站导航，它位于 header 中，而且目前为止是 header 中唯一的 ul 元素。.header ul{} 的确可以生效，但是这样并不是好方法，它很容易过时，而且非常晦涩。如果我们在 header 中再添加一个 ul 的话，它就会套用我们给这个导航部分写的样式，哪怕我们设想的不是这个效果。这意味着我们要么要重构许多代码，要么给后面的 ul 新写许多样式来抵消之前的影响。 你的选择器必须符合你要给这个元素添加样式的原因。思考一下，「我定位到这个元素，是因为它是 .header 下的 ul，还是因为它是我的网站导航？」这将决定你应当如何使用选择器。 确保你的核心选择器不是类型选择器，也不是高级对象或抽象选择器。例如你在我们的 CSS 中肯定找不到诸如 .sidebar ul{} 或者 .footer .media{} 这样的选择器。 表达清晰：直接找到你要添加样式的元素，而非其亲元素。不要想当然地认为 HTML 不会改变。用 CSS 直接命中你需要的元素，而非投机取巧。 !important 只在起辅助作用的 class 上用 !important。用 !important 提升优先级也可以，例如如果你要让某条规则一直生效的话，可以用 .error{ color:red!important; }。 避免主动使用 !important。例如 CSS 写得很复杂时不要用它来取巧，要好好整理并重构之前的部分，保持选择器简短并且避免用 ID 将效果拔群。 魔数与绝对定位 魔数（Magic Number）是指那些「凑巧有效果」的数字，这东西非常不好，因为它们只是治标不治本而且缺乏拓展性。 例如 .dropdown-nav li:hover ul{ top:37px; } 把下拉菜单移动下来远非良策，因为这里的 37px 就是个魔数。37px 会生效的原因是因为这时 .dropbox-nav 碰巧高 37px 而已。 这时你应该用 .dropdown-nav li:hover ul{ top:100%; }，也即无论 .dropbox-down 多高，这个下拉菜单都会往下移动 100%。 每当你要在代码中放入数字的时候，请三思而行。如果你能用一个关键字（例如 top:100% 意即「从上面拉到最下面」）替换之，或者有更好的解决方法的话，就尽量避免直接出现数字。 你在 CSS 中留下的每一个数字，都是你许下而不愿遵守的承诺。 条件判断 专门为 IE 写的样式基本上都是可以避免的，唯一需要为 IE 专门处理的是为了处理 IE 不支持的内容（例如 PNG）。 简而言之，如果你重构 CSS 的话，所有的布局和盒模型都不用额外兼容 IE。也就是说你基本上不用 或者类似的兼容 IE 的写法。 Debugging 如果你要解决 CSS 问题的话，先把旧代码拿掉再写新的。如果旧的 CSS 中有问题的话，写新代码是解决不了的。 把 CSS 代码和 HTML 部分删掉，直到没有 BUG 为止，然后你就知道问题出在哪里了。 有时候写上一个 overflow:hidden 或者其它能把问题藏起来的代码的确效果立竿见影，但是 overflow 方面可能根本就没问题。所以要治本，而不是单纯治标。 CSS 预处理器 我用 Sass。使用时应当灵活运用。用 Sass 可以令你的 CSS 更强大，但是不要嵌套得太复杂。在 Vanilla CSS 中，只在必要的地方用嵌套即可，例如： 1234.header&#123;&#125;.header .site-nav&#123;&#125;.header .site-nav li&#123;&#125;.header .site-nav li a&#123;&#125; 这样的写法在普通 CSS 里完全用不到。以下为不好的 Sass 写法： 1234567.header&#123; .site-nav&#123; li&#123; a&#123;&#125; &#125; &#125;&#125; 如果你用 Sass 的话，尽量这么写： 12345.header&#123;&#125;.site-nav&#123; li&#123;&#125; a&#123;&#125;&#125; 最后我列出一些我将要用到的技巧，并且坚持做下去： 尽量不让自己的样式层级超过三层 尽量不使用!important，通过添加和使用类名，比如.hidden类名 尽量远离Sass中介绍@extend的一般经验法则——他们有些是迷惑人 尽量在样式表中添加注释 让团队写CSS有一个标准规范——Harry Roberts写了一个很有名的CSS指南 此外，应该有一个可以展示元素样式的模块库 使用类似scss-lint工具，让你的SCSS/CSS和规范保持一致 尽量不要使用*这样的全局选择器 JavaScript钩子是使用的类名，尽量加上前缀js- 尽量在项目中重复使用类名和模块 取名尽量和Bootstrap框架的组件接近 在样式中避免使用#id","categories":[],"tags":[]},{"title":"","slug":"CSS设计模式：OOCSS 和 SMACSS","date":"2017-04-07T09:07:23.000Z","updated":"2017-04-07T09:07:23.000Z","comments":true,"path":"2017/04/07/CSS设计模式：OOCSS 和 SMACSS/","link":"","permalink":"http://yoursite.com/2017/04/07/CSS设计模式：OOCSS 和 SMACSS/","excerpt":"","text":"CSS设计模式：OOCSS 和 SMACSSOOCSS语义化和演示(视觉)类名 演示(Presentational)：这里更趋向于将其称之为视觉类名，就是纯视觉。简单点说，视觉化类名是没有任何意思，就是根据视觉呈现的风格化，将其在HTML元素中声明类名。也就是说根据，视觉的表象，在HTML定义对应的类名，比如red、blue、mb10等 语义化(Semantic):根据语义化在HTML中给元素定义类名。简单点说，就是根据功能模块，在HTML中定义类名，比如.user-registration或者.billing-info等 OOCSS基本原则 先来看看OOCSS基本原则中，认为比较好的方面： 强调重用 选择器简洁 可扩展类 强调风格与内容分离 强调内容与容器分离 既然有好的一面，当然也不足的地方： 大量使用演示类 需要在模板中应用演示类 样式(CSS)和结构(HTML)藕合太紧 如果设计变动，需要更改CSS和HTML 创建了数千行CSS，但有可能这些CSS永远不会被使用。比如Twitter Bootstrap OOCSS 不是什么新技术，只是一种撰写 CSS 的设计模式，或者可以说是一种「道德规范」，大致上我觉得重点只有两个： 减少对 HTML 结构的依赖 增加 CSS class 重复性的使用 减少对 HTML 结构的依赖 1234567&lt;nav class=&quot;nav--main&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; 一般的导航栏写法，结构应该会像上面的 HTML 范例一样，如果要对那些a标签定义样式，CSS 的写法可能写成 .nav–main ul li a {}，这种写法先不管效能上的问题，可以看出来过度地依赖元素标签的结构，有可能之后 HTML 结构改变，这个 CSS 就必须跟著重构，造成维护上多余的成本。 若从这个例子来考量，原则上 a都一定会接在 li 标签的后面，一个 li 只会有一个 a，通常不会独立存在，那就可以写成 .nav–main a {}，会是比较好的写法，甚至是直接给 a 加上 class nav–main_item。后者是 OOCSS 所提倡的用法。 增加 CSS class 的重复使用在 OOCSS 的观念中，强调重复使用 class，而应该避免使用 id 作为 CSS 的选择器。这种想法就是像OOP尽量抽离重复的程式码，例如以下这个例子，这是两种按钮的 CSS 样式属性： 1234567.button &#123; display: inline-block; padding: 6px 12px; color: hsla(0, 100%, 100%, 1); &amp;.button-default &#123; background: hsla(180, 1%, 28%, 1); &#125; &amp;.button-primary &#123; background: hsla(208, 56%, 53%, 1); &#125;&#125; 上面的 CSS 将两种不同样式的 button，抽离出重复的部份，并且定义在同个 class 上。因此，要使用这样的样式，HTML 的写法可能长这个样子： 12&lt;a class=&quot;button button-default&quot;&gt;&lt;a class=&quot;button button-primary&quot;&gt; 先用 button 宣告此为一个按钮的样式，再用 button-default 或 button-primary 作为按钮底色的区别。这么做可以维护成本变得比较低，例如：想要改网站上所有按钮的大小，就只要修改 .button 的 padding 而已。 SMACSSSMACSS 的概念仅限于它对 CSS 不同的业务逻辑所做的划分方式 BaseBase 就是设定标签元素的预设值，例如浏览器的 reset 可以写在这里，如果用的是 Compass，只要 @include global-reset 即可。这里只会对标签元素本身做设定，不会出现任何 class 或id，但是可以有属性选择器或是伪类： 123html &#123;&#125;input[type=text] &#123;&#125;a:hover &#123;&#125; LayoutLayout 是指整个网站的「大架构」的外观，而非 .button 这种小元件的 class。网站通常会有一些主要的大区块，可能是 header 或 footer，Layout 就是用来定义这些「大架构」的 CSS。如果有做 Responsive Web Design 或是用 Grid System，也是把规则写在 Layout 这里。 123456#header &#123; margin: 30px 0; &#125;#articles-wrapper &#123; ......; &#125;.sidebar &#123; &amp;.sidebar--right &#123; ......; &#125; &amp;.sidebar-left &#123; ......; &#125;&#125; 通常只有一个选择器，一个 id、或一个 class Module 原本的 SMACSS 对 Module 的设计我觉得不是很好，所以我硬是将 Module 拆分出一个 Partial。 这里的 Module 顾名思义，就是可以在其他地方被重复使用，如果要找更明确的例子，我想就像 Twitter Bootstrap 的 Components一样，或者像前面 OOCSS 所举例的 .button 这种会被重复使用的元件模组。 模组不需要用任何的 prefix，因为 Module 就是设计来可以重复应用在不同的 page 上。 Partial Partial 跟 Latout 不同，也跟 Module 不同，他比 Layout 的范围小，可能是 header 底下的某个子元素。他不像 Module，他是特定单一领域下特别的设定。 123.nav--main &#123; a &#123; ......; &#125;&#125; 通常会将 Partial 的名称加在子 class 作为 prefix，例如 .nav–main 底下的.nav–main_item。 State State 负责定义元素不同的状态下，所呈现的样式。但是并非指一个元素的 :hover 或 :active 下的状态。举例来说，一个导航栏分页，目前所在页面的分页需要加上 .active的属性表示目前位置是在这个分页，HTML 会长这样： 1234567&lt;nav class=&quot;nav--main&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;active&quot;&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; 因此可以替 .nav–main 增加 .active 这样的子 class： 123456.nav--main &#123; // others…; .active &#123; background: darken($background-color, 16%); &#125;&#125; Theme Theme 是画面上所有「皮肤」的定义，例如 border-color、background-image 或是 font-family 等相关的 Typography 设定。为什么说是「皮肤」？因为有些元件模组仍然是留在 Module 去定义，Theme 就像 Layout 一样负责「大架构」上的视觉样式。","categories":[],"tags":[]},{"title":"","slug":"严格相等运算符“===”","date":"2017-03-22T06:33:58.000Z","updated":"2017-03-22T06:33:58.000Z","comments":true,"path":"2017/03/22/严格相等运算符“===”/","link":"","permalink":"http://yoursite.com/2017/03/22/严格相等运算符“===”/","excerpt":"","text":"严格相等运算符“===” 如果俩个值类型不同，则它们不相等 如果2个值都是null或者都是underfined，则它们不等 如果2个值都是布尔值true或者都是布尔值false，则它们不等 如果其中一个的值是NaN，或者两个值都是NaN，则它们不等。NaN和其他任何值都是不等的，包括它本身！通过x！==x来判断是否为NaN，只有在x为NaN的时候，这个表达式的值才为true 如果两个值为数字且数值相等，则它们相等。如果一个值为0，另一个值为-0，则它们同样相等 如果两个值为字符串，且所含的对应位上的16位数完全相等，则它们相等。如果它们长度或内容不同，则它们不等。两个字符串可能含义完全不一样且所显示出的字符也一样，单具有不同编码的16位值。javascript并不对Unicode进行标准化的转换，因此像这样的字符串通过“===”和“==”运算符的比较结果也不相等。第三部分的String.localCompare（）提供了另外一种比较字符串的方法。 如果两个引用值指向同一个对象、数组、或函数，则它们是相等的。如果指向不同的对象，则它们是不等的，尽管两个对象具有完全一致的属性。","categories":[],"tags":[]},{"title":"","slug":"字符串调用方法","date":"2017-03-17T07:56:07.000Z","updated":"2017-03-17T07:56:07.000Z","comments":true,"path":"2017/03/17/字符串调用方法/","link":"","permalink":"http://yoursite.com/2017/03/17/字符串调用方法/","excerpt":"","text":"1var s=&quot;hello,world&quot; 定义一个字符串 1s.charAt(0) h:第一个字符串 1s.charAt(s.length-1) d:最后一个字符串 1s.substring(1,4) ell 第2~4个字符串 1s.slice(1,4) 同上 1s.slice(-3) rld 截取后三位 1s.indexOf(&quot;l&quot;) 2 l首次出现的位置 1s.lastIndexOf(&quot;l&quot;) 10 字符串l最后一次出现的位置 1s.indexOf(&quot;l&quot;,3) 3 在位置3及之后首次出现字符l的位置 1s.split(&quot;,&quot;) [“hello”,”world”]分割成字符串 1s.replace(&quot;h&quot;,&quot;H&quot;) “Hello，world”：全文字符串替换 1s.toUpperCase() “HEELO,WORLD”:全文大写 可以使用方括号的方法来访问字符串的单个字符s=”hello,world”;s[0] “h”","categories":[],"tags":[]},{"title":"","slug":"javascript中math对象的属性定义的函数和常量","date":"2017-03-17T06:39:35.000Z","updated":"2017-03-17T06:39:35.000Z","comments":true,"path":"2017/03/17/javascript中math对象的属性定义的函数和常量/","link":"","permalink":"http://yoursite.com/2017/03/17/javascript中math对象的属性定义的函数和常量/","excerpt":"","text":"1Math.pow(2,53) //=&gt; 9007199254740992 2的53次幂 1Math.round(.6) // =&gt; 1.0 四舍五入 1Math.ceil(.6) // =&gt; 1.0 向上求整 1Math.floor(.6) // =&gt; 0 向上求整 1Math.abs(-5) // =&gt; 5 求绝对值 1Math.max(x,y,z) // =&gt; 返回最大值 1Math.min(x,y,z) // =&gt; 返回最小值 1Math.random() // =&gt; 生成一个大于0小于1.0的伪随机数 1Math.PI // =&gt; π，圆周率 1Math.E // =&gt; e 自然对数的底数 1Math.sqrt(3) // =&gt; 3的平方根 1Math.pow(3,1/3) // =&gt; 3的立方根 1Math.sin(0) // =&gt; 三角函数：还有Math.cos,Math.tan等 1Math.log(0) // =&gt; 10的自然对数 1Math.log(100)/Math.LN10 // =&gt; 以10为底100的对数 1Math.log(512)/Math.LN2 // =&gt; 以2为底512的对数 1Math.exp(3) // =&gt; e的三次幂","categories":[],"tags":[]},{"title":"","slug":"vue.js","date":"2017-03-17T06:21:04.000Z","updated":"2017-03-17T06:21:04.000Z","comments":true,"path":"2017/03/17/vue.js/","link":"","permalink":"http://yoursite.com/2017/03/17/vue.js/","excerpt":"","text":"vue.js笔记1、轻量级的mvvm框架，同时吸收了angular和react的优点 2、安装vue环境，具体可参考vue官网1） 命令行安装在终端 sudo npm install -g vue-cli2) 安装完成后创建一个基于 webpack 模板的新项目 1sudo vue init webpack my-project(my-project为项目的名称) 会发现我们电脑多了一个my-project的文件夹3） cd my-project 进入到该项目的根目录 1sudo npm install 安装项目的依赖，会发现这个文件夹里面多了node_moudles这个文件夹4）npm run dev 让整个项目跑起来，在浏览器输入localhost:8080,会打开vue.js的初始页跑的时候发生错误，vue和vue-template-compiler 版本不一致，打开vue-template-compiler文件夹的packagk.json文件夹，修改里面的版本号，修改和vue版本号一致 3、vue所有的数据放在data里面，data里面也是对象的形式，进行双向数据绑定 4、new一个vue对象的时候可以设置它的属性，其中最重要的包括3个，分别是data，methods,watch其中data代表vue对象数据，methods代表vue对象的方法，watch设置了对象的监听的方法。vue对象里面的设置通过html指令进行关联重要的指令包括v-text 渲染数据v-if 控制显示v-on 绑定事件v-for 循环渲染 5、","categories":[],"tags":[]},{"title":"","slug":"grunt","date":"2017-03-08T08:04:23.000Z","updated":"2017-03-08T08:04:23.000Z","comments":true,"path":"2017/03/08/grunt/","link":"","permalink":"http://yoursite.com/2017/03/08/grunt/","excerpt":"","text":"用grunt搭建自动化前端教程1、安装node.js 2、安装grunt-CLI把grunt-cli安装到全局变量 sudu npm install -g grunt-cli验证grunt是否安装成功，在命令行输入grunt，出现以下结果即可 3、创建一个简单的网站 1）Grunt是应用于实际项目的，所以我们得有一个简单的测试网站来演示grunt的安装、使用。 2）首先创建一个“grunt_test”文件夹，里面建了三个空文件夹、两个空文档。（注意 Gruntfile.js 文件的首字母大写！） 3）给package.json里面添加内容，按Json格式写 很简单，我们把这个网站或系统的名称、版本写了一下。 “devDependencies”字面意思解释是“开发依赖项”，即我们现在这个系统，将会依赖于哪些工具来开发。 另外，其实package.json中你可以增加任何符合json格式的代码，它生来自由，仅仅受json代码格式的限制。 4、安装grunt在grunt_text目录下面安装grunt 1sudo npm install grunt --save-dev 这里需要解释的是，“—save-dev”的意思是，在当前目录安装grunt的同时，顺便把grunt保存为这个目录的开发依赖项。看到“开发依赖项”这一次，是不是觉得有些眼熟？上文在配置package.json时，其中的“devDependencies”中就会存储开发依赖项。 具体保存为开发依赖项是一个什么效果？动手安装一下就是了。首先，在运行安装grunt的命令之前，package.json中的“devDependencies”对应的是空对象。 现在我们来运行这行命令。你会看到几条warning提示，不用管它。然后接下来就是加载状态，一个旋转的小横线。稍等待一会儿，会提示你安装成功。安装成功后打开package.json文件就会发现里面的devDependencies后面添加了东西然后看grunt_text文件夹下面多了node_modules文件夹，这个文件夹下面存放的我们下载好的grunt文件 5、配置Gruntfile.js 6、Grunt插件介绍进入grunt官网的插件列表页面 grunt，我们能看到grunt到目前位置的所有插件。现在里面有4560个插件，这个数量每天都在增加。而且，这些既然出现在官网，肯定是经过审核的。 插件分为两类。第一类是grunt团队贡献的插件，这些插件的名字前面都带有“contrib-”前缀，而且在插件列表中有星号标注。第二类是第三方提供的插件，不带有这两个特征。 和jquery一样，插件那么多，肯定不会全部用。grunt官网插件列表的前几个插件中的前几个插件，下载量最多，它们肯定是大家都在用的插件。第一名jshint插件最近30天下载量将近89万次，这是多么惊人的下载量！ Contrib-jshint——javascript语法错误检查； Contrib-watch——实时监控文件变化、调用相应的任务重新执行； Contrib-clean——清空文件、文件夹； Contrib-uglify——压缩javascript代码 Contrib-copy——复制文件、文件夹 Contrib-concat——合并多个文件的代码到一个文件中 karma——前端自动化测试工具 以上这些插件，本文不会全部讲到。但是随着讲解其中的一部分，我想你就能掌握使用grunt插件的方法。知道方法了，然后你就可以参考官方文档去使用你想要的插件。 7、使用uglify插件（压缩javascript代码）Uglify插件的功能就是压缩javascript代码。 1sudo npm install grunt-contrib-uglify --save-dev 然后配置Gruntfile.js第一步，在grunt.initConfig方法中配置 uglify 的配置参数。 12345678910uglify:&#123; options:&#123; stripBanners:true, banner:&apos;/*! &lt;%=pkg.name%&gt;-&lt;%pkg.version%&gt;.js&lt;%=grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&apos; &#125;, build:&#123; src:&apos;src/test.js&apos;, dest:&apos;bulid/&lt;%pkg.name%&gt;-&lt;%=pkg.version%&gt;.js.min.js&apos; &#125; &#125; 第二步，在 grunt.initConfig 方法之后，要让grunt去加载这一个插件。 1grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;); 第三步，在grunt命令执行时，要不要立即执行uglify插件？如果要，就写上，否则不写。我现在是需要的，所以我写上。 1grunt.registerTask(&apos;default&apos;,[&apos;uglify&apos;); 然后再build文件夹里面就可以看到压缩后的js文件 8、使用watch插件（真正实现自动化）配置Gruntfile.js 1234567watch:&#123; build:&#123; files:[&apos;src/*.js&apos;,&apos;css/*.js&apos;], tasks:[&apos;jshint&apos;,&apos;uglify&apos;], options:&#123;spawn:false&#125; &#125; &#125; 1grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;); 1grunt.registerTask(&apos;default&apos;,[&apos;uglify&apos;,&apos;watch&apos;]); 运行grunt命令，控制台提示watch已经开始监听。此时要想停止，按ctrl + c即可。 9、批量安装插件到现在为止，我刚刚安装了2个插件，“node_modules”文件夹所占据的空间就有18MB了。上传代码到开发库的时候，不上传node_modules这里面所有的文件。 问题又来了，我如果作为开发环境的搭建者，我不把“node_modules”上传，其他一起开发的人，怎么得到这些grunt插件和工具呢？有人回答让他们自己去手动一个一个安装——首先这是一个笨方法，其次如果我当年安装的旧版本，而他们现在自己安装的可能是新版本。新旧有可能不兼容啊。 该怎么办？ 其实答案很简单——我上传源码时候，肯定会把package.json上传上去，而package.json中的“devDependencies”就记录了这个系统的开发依赖项，然后我通过nodejs的npm即可批量安装。 做一个试验。我在D盘下面新建一个目录“grunt_test_1”，然后把“grunt_test”中的package.json拷过去。在打开命令行跳转到“grunt_test_1”，执行“npm install”命令 此时按回车执行命令，结果在“grunt_test_1”生成了“node_modules”文件夹，里面安装好了package.json中“devDependencies”配置的插件。而且，版本都是一直的。","categories":[],"tags":[]},{"title":"","slug":"添加评论","date":"2017-03-07T09:22:03.000Z","updated":"2017-03-07T09:22:03.000Z","comments":true,"path":"2017/03/07/添加评论/","link":"","permalink":"http://yoursite.com/2017/03/07/添加评论/","excerpt":"","text":"给hexo添加评论功能1、进入多说多说 2、注册多说账户 3、点击我要创建 4、根据要求填写信息 5、在 theme/yilia/layout/_partial/post/目录下创建文件名叫：duoshuo.ejs（ps:我的是系统直接创建的，如果有可以省略） 6、把下面的代码复制进去 123456789101112131415161718&lt;div class=&quot;duoshuo&quot;&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%=key%&gt;&quot; data-title=&quot;&lt;%=title%&gt;&quot; data-url=&quot;&lt;%=url%&gt;&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt;&lt;/div&gt; 7、在 hexo/_comfig.yml 里边添加一下代码 1duoshuo_shortname: xxxx(冒号后有空格 名字是多说上面的用户名) 8、最后在 theme/yilia/_config.yml 里边添加以下代码（名字换成自己的） 12duoshuo: trueshort_name: xxxx #名字换你自己在多说后台的名字(冒号后有空格) 最后提交便可以看到评论啦","categories":[],"tags":[]},{"title":"","slug":"添加音乐","date":"2017-03-07T09:14:39.000Z","updated":"2017-03-07T09:14:39.000Z","comments":true,"path":"2017/03/07/添加音乐/","link":"","permalink":"http://yoursite.com/2017/03/07/添加音乐/","excerpt":"","text":"hexo 添加网易云音乐1、进入网易云音乐官网网易 2、到我的主页查看我的歌单 3、点击你的任意一个歌单进入（前提你有创建好的歌单） 4、点击生成外链播放器 5、选择你想要的尺寸，复制下面的html代码 6、最后打开（themes/yilia/layout/_partial/left-col.ejs）(你喜欢放在那里自己选择)把复制好的网易云音乐放到第二行里边大功告成！","categories":[],"tags":[]},{"title":"","slug":"修改主题","date":"2017-03-07T08:54:52.000Z","updated":"2017-03-07T08:54:52.000Z","comments":true,"path":"2017/03/07/修改主题/","link":"","permalink":"http://yoursite.com/2017/03/07/修改主题/","excerpt":"","text":"如何更改hexo的主题1、进入到当前hexo的根目录 1git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia 2、在./_config.yml，修改主题为yiliatheme: yilia 还有好多主题，换的方法都一样 3、在终端$ hexo s -g 在本地浏览效果 1$ hexo d -g 上传到github上","categories":[],"tags":[]},{"title":"","slug":"hexo","date":"2017-03-07T08:45:30.000Z","updated":"2017-03-07T08:45:30.000Z","comments":true,"path":"2017/03/07/hexo/","link":"","permalink":"http://yoursite.com/2017/03/07/hexo/","excerpt":"","text":"如何用hexo+github搭建博客本项目github地址：github一、环境安装1.下载node.js(node.js) 2.git 3.hexo1）打开mac系统终端2）输入安装hexo的代码(此处安装时有可能会提示输入系统管理员密码)$ sudo npm install -g hexo（mac环境下）二、hexo创建静态博客1.自己在本地新建文件夹，该文件夹为博客的初始文件夹 2.在终端进入该文件夹，初始化博客cd 文件夹路径，进入该文件夹后执行 $ hexo init命令 上述完成后，生成原始文件；这个新建的文件夹就是博客的根目录 本地查看：启用本地服务命令(退出按ctrl+c) $ hexo s 将出现的地址输入浏览器，即可查看到本地效果 三、github配置 注册github账号并登陆 获取本机的SSH口令 1）输入获取代码，回车直到出现图片所示图形为止 $ ssh-keygen 2）输入编译代码 $ vim ~/.ssh/id_rsa.pub3）出现SSH口令后，复制，并在下方输入:q，随后按下回车可以退出该窗口(ps:复制时一定要将红框圈住的一起复制)4）进入到github页面设置SSH口令 点击用户下拉菜单中的settings（step1) 点击左侧的SHH and GPG keys（step2) 在Title中输入口令名称（随意）（step3) 在key中贴上SSH口令（step4) 创建新的仓库 1）创建新的仓库（repOSitory） 点击用户左侧的+号菜单中的New repOSitory（step1) 在repOSitory name中输入二级域名，格式请严格遵照username.github.io（step2) ps：username填写github的登录用户名，否则上线的时候会报错 是否公开选项可以选取Public（step3) 勾选step4处，会自动生成一份可编辑的README.md文件（建议勾选）（step4) 点击create repOSitory生成仓库完毕（step5) 2）查看新建的仓库（repOSitory） 可以回到github个人首页点击右侧的仓库区 进入后在step1处选择并复制http地址，注意此时step2处应该是空的四、发布博客 设置blog配置文件 1）打开blog文件夹下的_config.yml文件 2）找到最下方的type，输入git（注意冒号后面是带空格的） 3）repo行可能没有，需要自己输入，后面跟上github上仓库中复制的http地址（注意此时1、2两处应该是一样的username），不然上传时会报错 4）其他博客设置 title：博客名称 subtitle：博客副标题 description：博客描述 author：作者 language：语言（简体中文是zh-CN） 在终端上传博客 1）进入终端，输入git上传插件安装代码（安装时会提示输入github用户名及密码） $ npm install hexo-deployer-git –save2）安装完毕后，输入获取代码$ hexo g3）最后输入上传代码$ hexo d4）重新在github仓库查看上传文件，此时在step2中会有之前bolg中生成的文件5）step3处就是你的博客地址","categories":[],"tags":[]},{"title":"","slug":"如何上传文章","date":"2017-03-07T08:43:10.000Z","updated":"2017-03-07T08:43:10.000Z","comments":true,"path":"2017/03/07/如何上传文章/","link":"","permalink":"http://yoursite.com/2017/03/07/如何上传文章/","excerpt":"","text":"如何在hexo上发表文章1、使用一些在线的markdown编辑器，比如csdn提供的下载地址2、将写好的文章导出到本地（ps:导出格式为.md）3、将导出的文件放到hexo根文件夹下的source/_posts下，这里面主要放写好的文章，格式都为.md4、在终端进入到当前hexo跟文件夹下 $ hexo s -g 在本地浏览效果，如果满意 $ hexo d -g同时上传到github上面，ok一篇文章就上传ok了。","categories":[],"tags":[]}]}