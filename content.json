{"meta":{"title":"YOLO","subtitle":"You Only Live Once","description":"You Only Live Once","author":"yolo","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"CSS 规范","date":"2017-04-07T09:45:59.000Z","updated":"2017-04-07T09:45:59.000Z","comments":true,"path":"2017/04/07/CSS 规范/","link":"","permalink":"http://yoursite.com/2017/04/07/CSS 规范/","excerpt":"","text":"CSS 规范CSS 文档分析无论编写什么文档，我们都应当尽力维持统一的风格，包括统一的注释、统一的语法与统一的命名规范。 总则尽量将行宽控制在 80 字节以下。渐变（gradient）相关的语法以及注释中的 URL 等可以算作例外，毕竟这部分我们也无能为力。 单一文件与多文件有人喜欢在一份文件文件中编写所有的内容，而我在迁移至 Sass 之后开始将样式拆分成多个小文件。这都是很好的做法。无论你选择哪种，下文的规则都将适用，而且如果你遵守这些规则的话你也不会遇到什么问题。这两种写法的区别仅仅在于目录以及区块标题。 目录在 CSS 的开头，我会写一份目录，例如： 12345678/*------------------------------------*\\ $CONTENTS\\*------------------------------------*//** * CONTENTS............You’re reading it! * RESET...............Set our reset defaults * FONT-FACE...........Import brand font files */ 这份目录可以告诉其他开发者这个文件中具体含有哪些内容。这份目录中的每一项都与其对应的区块标题相同。 如果你在维护一份单文件 CSS，对应的区块将也在同一文件中。如果你是在编写一组小文件，那么目录中的每一项应当对应相应的 @include 语句。 区块标题目录应当对应区块的标题。请看如下示例 123/*------------------------------------*\\ $RESET\\*------------------------------------*/ 区块标题前缀 $ 可以让我们使用 [Cmd|Ctrl]+F 命令查找标题名的同时将搜索范围限制在区块标题中。如果你在维护一份大文件，那么在区块之间空 5 行，如下： 1234567891011121314/*------------------------------------*\\ $RESET\\*------------------------------------*/[Ourresetstyles]/*------------------------------------*\\ $FONT-FACE\\*------------------------------------*/ 在大文件中快速翻动时这些大块的空档有助于区分区块。 如果你在维护多份、以 @include 连接的 CSS 的话，在每份文件头加上标题即可，不必这样空行。 代码顺序 尽量按照特定顺序编写规则，这将确保你充分发挥 CSS 缩写中第一个 C 的意义：cascade，层叠。 一份规划良好的 CSS 应当按照如下排列： Reset 万物之根源 元素类型 没有 class 的 h1、ul 等 对象以及抽象内容 最一般、最基础的设计模式 子元素 由对象延伸出来的所有拓展及其子元素 修补 针对异常状态 如此一来，当你依次编写 CSS 时，每个区块都可以自动继承在它之前区块的属性。这样就可以减少代码相互抵消的部分，减少某些特殊的问题，组成更理想的 CSS 结构。 CSS 规则集分析 1234[选择器]&#123; [属性]:[值]; [&lt;- 声明 -&gt;]&#125; 编写 CSS 样式时，习惯遵守这些规则： class 名称以连字符（-）连接，除了下文提到的 BEM 命名法； 缩进 4 空格； 声明拆分成多行； 声明以相关性顺序排列，而非字母顺序； 有前缀的声明适当缩进，从而对齐其值； 缩进样式从而反映 DOM； 保留最后一条声明结尾的分号。 1234567891011121314151617.widget&#123; padding:10px; border:1px solid #BADA55; background-color:#C0FFEE; -webkit-border-radius:4px; -moz-border-radius:4px; border-radius:4px;&#125; .widget-heading&#123; font-size:1.5rem; line-height:1; font-weight:bold; color:#BADA55; margin-right:-10px; margin-left: -10px; padding:0.25em; &#125; 我们可以发现，.widget-heading 是 .widget 的子元素，因为前者比后者多缩进了一级。这样通过缩进就可以让开发者在阅读代码时快速获取这样的重要信息。 我们还可以发现 .widget-heading 的声明是根据其相关性排列的：.widget-heading 是行间元素，所以我们先添加字体相关的样式声明，接下来是其它的。 命名规范 一般情况下我都是以连字符（-）连接 class 的名字（例如 .foo-bar 而非 .foo_bar 或 .fooBar），不过在某些特定的时候我会用 BEM（Block, Element, Modifier）命名法。 BEM 命名法可以使得选择器更规范，更清晰，更具语义。 该命名法按照如下格式： 123.block&#123;&#125;.block__element&#123;&#125;.block--modifier&#123;&#125; 其中： .block 代表某个基本的抽象元素； .block__element 代表 .block 这一整体的一个子元素； .block--modifier 代表 .block 的某个不同状态。 12345.person&#123;&#125;.person--woman&#123;&#125; .person__hand&#123;&#125; .person__hand--left&#123;&#125; .person__hand--right&#123;&#125; 这个例子中我们描述的基本元素是一个人，然后这个人可能是一个女人。我们还知道人拥有手，这些是人体的一部分，而手也有不同的状态，如同左手与右手。 这样我们就可以根据亲元素来划定选择器的命名空间并传达该选择器的职能，这个选择器是一个子元素（__）还是亲元素的不同状态（–）？ 由此，.page-wrapper 是一个独立的选择器。这是一个符合规范的命名，因为它不是其它元素的子元素或其它状态；然而 .widget-heading 则与其它对象有关联，它应当是 .widget 的子元素，所以我们应当将其重命名为 .widget__heading。 BEM 命名法虽然不太好看，而且相当冗长，但是它使得我们可以通过名称快速获知元素的功能和元素之间的关系。与此同时，BEM 语法中的重复部分非常有利于 gzip 的压缩算法。 无论你是否使用 BEM 命名法，你都应当确保 class 命名得当，力保一字不多、一字不少；将元素命名抽象化以提高复用性（例如 .ui-list，.media）。由此延伸出去的元素命名则要尽量精准（例如 .user-avatar-link）。不用担心 class 名的数量或长度，因为写得好的代码 gzip 也能有效压缩。 HTML 中的 class 为了确保易读性，在 HTML 标记中用两个空格隔开 class 名，例如： 1&lt;div class=&quot;foo--bar bar__baz&quot;&gt; 增加的空格应当可以使得在使用多个 class 时更易阅读与定位。 JavaScript 钩子 千万不要把 CSS 样式用作 JavaScript 钩子。把 JS 行为与样式混在一起将无法对其分别处理。 如果你要把 JS 和某些标记绑定起来的话，写一个 JS 专用的 class。简单地说就是划定一个前缀 .js- 的命名空间，例如 .js-toggle，.js-drag-and-drop。这意味着我们可以通过 class 同时绑定 JS 和 CSS 而不会因为冲突而引发麻烦。 12&lt;th class=&quot;is-sortable js-is-sortable&quot;&gt;&lt;/th&gt; 上面的这个标记有两个 class，你可以用其中一个来给这个可排序的表格栏添加样式，用另一个添加排序功能。 注释 12345678910111213/** * 这是一个文档块（DocBlock）风格的注释。 * * 这里开始是描述更详细、篇幅更长的注释正文。当然，我们要把行宽控制在 80 字以内。 * * 我们可以在注释中嵌入 HTML 标记，而且这也是个不错的办法： * &lt;div class=foo&gt; &lt;p&gt;Lorem&lt;/p&gt; &lt;/div&gt; * * 如果是注释内嵌的标记的话，在它前面不加星号，否则会被复制进去。 */ 在注释中应当尽量详细描述代码，因为对你来说清晰易懂的内容对其他人可能并非如此。每写一部分代码就要专门写注释以详解。 注释的拓展用法 注释有许多很先进的用法，例如： 准修饰选择器 代码标签 继承标记 准修饰选择器： 你应当避免过分修饰选择器，例如如果你能写 .nav{} 就尽量不要写 ul.nav{}。过分修饰选择器将影响性能，影响 class 复用性，增加选择器私有度。这些都是你应当竭力避免的。 不过有时你可能希望告诉其他开发者 class 的使用范围。以 .product-page 为例，这个 class 看起来像是一个根容器，可能是 html 或者 body 元素，但是仅凭 .product-page 则无法判断。 我们可以在选择器前加上准修饰（即将前面的类型选择器注释掉）来描述我们规划的 class 作用范围： 1/*html*/.product-page&#123;&#125; 这样我们就能准确获知该 class 的作用范围而不会影响复用性。 123/*ol*/.breadcrumb&#123;&#125;/*p*/.intro&#123;&#125;/*ul*/.image-thumbs&#123;&#125; 代码标签 如果你写了一个新规则的话，可以在它上面加上标签，例如： 123456789/** * ^navigation ^lists */.nav&#123;&#125;/** * ^grids ^lists ^tables */.matrix&#123;&#125; 这些标签可以使得其他开发者快速找到相关代码。如果一个开发者需要查找和列表相关的部分，他只要搜索 ^lists 就能快速定位到 .nav，.matrix 以及其它相关部分。 继承标记 将面向对象的思路用于 CSS 编写的话，你经常能找到两部分 CSS 密切相关（其一为基础，其一为拓展）却分列两处。我们可以用继承标记来在原元素和继承元素之间建立紧密联系。这些在注释中的写法如下： 在元素的基本样式中： 1234/** * Extend `.foo` in theme.css */ .foo&#123;&#125; 在元素的拓展样式中： 1234/** * Extends `.foo` in base.css */ .bar&#123;&#125; 这样一来我们就能在两块相隔很远的代码间建立紧密联系。 面向对象 CSS 我以面向对象 CSS 的方式写代码。我把组件分成结构（对象）与外观（拓展）。正如以下分析： 12345.room&#123;&#125;.room--kitchen&#123;&#125;.room--bedroom&#123;&#125;.room--bathroom&#123;&#125; 我们在屋子里有许多房间，它们都有共同的部分：它们都包含地板、天花板、墙壁和门。这些共享的部分我们可以放到一个抽象的 .room{} class 中。不过我们还有其它与众不同的房间：一个厨房可能有地砖，卧室可能有地毯，洗手间可能没有窗户但是卧室会有，每个房间的墙壁颜色也许也会不一样。面向对象 CSS 的思路使得我们把相同部分抽象出来组成结构部分，然后用更具体的 class 来拓展这些特征并添加特殊的处理方法。 所以比起编写大量的特殊模块，应当努力找出这些模块中重复的设计模式并将其抽象出来，写成一个可以复用的 class，将其用作基础然后编写其它拓展模块的特殊情形。 当你要编写一个新组件时，将其拆分成结构和外观。编写结构部分时用最通用 class 以保证复用性，编写外观时用更具体的 class 来添加设计方法。 布局 所有组件都不要声明宽度，而由其亲元素或格栅系统来决定。 坚决不要声明高度。高度应当仅仅用于尺寸已经固定的东西，例如图片和 CSS Sprite。在 p，ul，div 等元素上不应当声明高度。如果需要的话可以写 line-height，这个更加灵活。 格栅系统应当当作书架来理解。是它们容纳内容，而不是把它们本身当成内容装起来，正如你先搭起书架再把东西放进去。比起声明它们的尺寸，把格栅系统和元素的其它属性分来开处理更有助于布局，也使得我们的前端工作更高效。 你在格栅系统上不应当添加任何样式，他们仅仅是为布局而用。在格栅系统内部再添加样式。在格栅系统中任何情况下都不要添加盒模型相关属性。 UI 尺寸 我用很多方法设定 UI 尺寸，包括百分比，px，em，rem 以及干脆什么都不用。 理想情况下，格栅系统应当用百分比设定。如上所述，因为我用格栅系统来固定栏宽和页宽，所以我可以不用理会元素的尺寸。 我用 rem 定义字号，并且辅以 px 以兼容旧浏览器。这可以兼具 em 和 px 的优势。下面是一个非常漂亮的 Sass Mixin，假设你在别处声明了基本字号（base-font-size）的话，用它就可以生成 rem 以及兼容旧浏览器的 px。 1234@mixin font-size($font-size)&#123; font-size:$font-size +px; font-size:$font-size / $base-font-size +rem;&#125; 简写 CSS 简写应当谨慎使用。 编写像 background:red; 这样的属性的确很省事，但是你这么写的意思其实是同时声明 background-image:none; background-position:top left; background-repeat: repeat; background-color:red;。虽然大多数时候这样不会出什么问题，但是哪怕只出一次问题就值得考虑要不要放弃简写了。这里应当改为 background-color:red;。 类似的，像 margin:0; 这样的声明的确简洁清爽，但是还是应当尽量写清楚。如果你只是想修改底边边距，就要具体一些，写成 margin-bottom:0;。 反过来，你需要声明的属性也要写清楚，不要因为简写而波及其它属性。例如如果你只想改掉底部的 margin，那就不要用会把其它边距也清零的 margin:0。 简写虽然是好东西，但是注意切勿滥用。 ID 在我们开始处理选择器之前，牢记这句话： 在 CSS 里坚决不要用 ID。 在 HTML 里 ID 可以用于 JS 以及锚点定位，但是在 CSS 里只要用 class，一个 ID 也不要用。 Class 的优势在于复用性，而且私有度也并不高。私有度非常容易导致问题，所以将其降低就尤为重要。ID 的私有度是 class 的 255 倍，所以在 CSS 中坚决不要使用。 选择器 务必保持选择器简短高效。 通过页面元素位置而定位的选择器并不理想。例如 .sidebar h3 span{} 这样的选择器就是定位过于依赖相对位置，所以把 span 移到 h3 和 sidebar 外面时就很难保持其样式。 结构复杂的选择器将会影响性能。选择器结构越复杂（如 .sidebar h3 span 为三层，.content ul p a 是四层），浏览器的消耗就越大。 尽量使得样式不依赖于其定位，尽量保持选择器简洁清晰。 作为一个整体，选择器应当尽量简短（例如只有一层结构），但是 class 名则不应当过于简略，例如 .user-avatar 就远比 .usr-avt 好。 牢记：class 无所谓是否语义化；应当关注它们是否合理。不要强调 class 名要符合语义，而要注重使用合理且不会过时的名称。 过度修饰的选择器 由前文所述，过度修饰的选择器并不理想。 过度修饰的选择器是指像 div.promo 这样的。很可能你只用 .promo 也能得到相同的效果。当然你可能偶尔会需要用元素类型来修饰 class（例如你写了一个 .error 而且想让它在不同的元素类型中显示效果不一样，例如 .error{ color:red; } div.error{ padding:14px;}），但是大多数时候还是应当尽量避免。 再举一个修饰过度的选择器例子，ul.nav li a{}。如前文所说，我们马上就可以删掉 ul 因为我们知道 .nav 是个列表，然后我们就可以发现 a 一定在 li 中，所以我们就能将这个选择器改写成 .nav a{}。 选择器性能 虽然浏览器性能日渐提升，渲染 CSS 速度越来越快，但是你还是应当关注效率。使用间断、没有嵌套的选择器，不把全局选择器（*{}）用作核心选择器，避免使用日渐复杂的 CSS3 新选择器可以避免这样的问题。 译注，核心选择器：浏览器解析选择器为从右向左的顺序，最右端的元素是样式生效的元素，是为核心选择器。 使用 CSS 选择器的目的 比起努力运用选择器定位到某元素，更好的办法是直接给你想要添加样式的元素直接添加一个 class。我们以 .header ul{} 这样一个选择器为例。 假定这个 ul 就是这个网站的全站导航，它位于 header 中，而且目前为止是 header 中唯一的 ul 元素。.header ul{} 的确可以生效，但是这样并不是好方法，它很容易过时，而且非常晦涩。如果我们在 header 中再添加一个 ul 的话，它就会套用我们给这个导航部分写的样式，哪怕我们设想的不是这个效果。这意味着我们要么要重构许多代码，要么给后面的 ul 新写许多样式来抵消之前的影响。 你的选择器必须符合你要给这个元素添加样式的原因。思考一下，「我定位到这个元素，是因为它是 .header 下的 ul，还是因为它是我的网站导航？」这将决定你应当如何使用选择器。 确保你的核心选择器不是类型选择器，也不是高级对象或抽象选择器。例如你在我们的 CSS 中肯定找不到诸如 .sidebar ul{} 或者 .footer .media{} 这样的选择器。 表达清晰：直接找到你要添加样式的元素，而非其亲元素。不要想当然地认为 HTML 不会改变。用 CSS 直接命中你需要的元素，而非投机取巧。 !important 只在起辅助作用的 class 上用 !important。用 !important 提升优先级也可以，例如如果你要让某条规则一直生效的话，可以用 .error{ color:red!important; }。 避免主动使用 !important。例如 CSS 写得很复杂时不要用它来取巧，要好好整理并重构之前的部分，保持选择器简短并且避免用 ID 将效果拔群。 魔数与绝对定位 魔数（Magic Number）是指那些「凑巧有效果」的数字，这东西非常不好，因为它们只是治标不治本而且缺乏拓展性。 例如 .dropdown-nav li:hover ul{ top:37px; } 把下拉菜单移动下来远非良策，因为这里的 37px 就是个魔数。37px 会生效的原因是因为这时 .dropbox-nav 碰巧高 37px 而已。 这时你应该用 .dropdown-nav li:hover ul{ top:100%; }，也即无论 .dropbox-down 多高，这个下拉菜单都会往下移动 100%。 每当你要在代码中放入数字的时候，请三思而行。如果你能用一个关键字（例如 top:100% 意即「从上面拉到最下面」）替换之，或者有更好的解决方法的话，就尽量避免直接出现数字。 你在 CSS 中留下的每一个数字，都是你许下而不愿遵守的承诺。 条件判断 专门为 IE 写的样式基本上都是可以避免的，唯一需要为 IE 专门处理的是为了处理 IE 不支持的内容（例如 PNG）。 简而言之，如果你重构 CSS 的话，所有的布局和盒模型都不用额外兼容 IE。也就是说你基本上不用 或者类似的兼容 IE 的写法。 Debugging 如果你要解决 CSS 问题的话，先把旧代码拿掉再写新的。如果旧的 CSS 中有问题的话，写新代码是解决不了的。 把 CSS 代码和 HTML 部分删掉，直到没有 BUG 为止，然后你就知道问题出在哪里了。 有时候写上一个 overflow:hidden 或者其它能把问题藏起来的代码的确效果立竿见影，但是 overflow 方面可能根本就没问题。所以要治本，而不是单纯治标。 CSS 预处理器 我用 Sass。使用时应当灵活运用。用 Sass 可以令你的 CSS 更强大，但是不要嵌套得太复杂。在 Vanilla CSS 中，只在必要的地方用嵌套即可，例如： 1234.header&#123;&#125;.header .site-nav&#123;&#125;.header .site-nav li&#123;&#125;.header .site-nav li a&#123;&#125; 这样的写法在普通 CSS 里完全用不到。以下为不好的 Sass 写法： 1234567.header&#123; .site-nav&#123; li&#123; a&#123;&#125; &#125; &#125;&#125; 如果你用 Sass 的话，尽量这么写： 12345.header&#123;&#125;.site-nav&#123; li&#123;&#125; a&#123;&#125;&#125; 最后我列出一些我将要用到的技巧，并且坚持做下去： 尽量不让自己的样式层级超过三层 尽量不使用!important，通过添加和使用类名，比如.hidden类名 尽量远离Sass中介绍@extend的一般经验法则——他们有些是迷惑人 尽量在样式表中添加注释 让团队写CSS有一个标准规范——Harry Roberts写了一个很有名的CSS指南 此外，应该有一个可以展示元素样式的模块库 使用类似scss-lint工具，让你的SCSS/CSS和规范保持一致 尽量不要使用*这样的全局选择器 JavaScript钩子是使用的类名，尽量加上前缀js- 尽量在项目中重复使用类名和模块 取名尽量和Bootstrap框架的组件接近 在样式中避免使用#id","categories":[],"tags":[]},{"title":"","slug":"CSS设计模式：OOCSS 和 SMACSS","date":"2017-04-07T09:07:23.000Z","updated":"2017-04-07T09:07:23.000Z","comments":true,"path":"2017/04/07/CSS设计模式：OOCSS 和 SMACSS/","link":"","permalink":"http://yoursite.com/2017/04/07/CSS设计模式：OOCSS 和 SMACSS/","excerpt":"","text":"CSS设计模式：OOCSS 和 SMACSSOOCSS语义化和演示(视觉)类名 演示(Presentational)：这里更趋向于将其称之为视觉类名，就是纯视觉。简单点说，视觉化类名是没有任何意思，就是根据视觉呈现的风格化，将其在HTML元素中声明类名。也就是说根据，视觉的表象，在HTML定义对应的类名，比如red、blue、mb10等 语义化(Semantic):根据语义化在HTML中给元素定义类名。简单点说，就是根据功能模块，在HTML中定义类名，比如.user-registration或者.billing-info等 OOCSS基本原则 先来看看OOCSS基本原则中，认为比较好的方面： 强调重用 选择器简洁 可扩展类 强调风格与内容分离 强调内容与容器分离 既然有好的一面，当然也不足的地方： 大量使用演示类 需要在模板中应用演示类 样式(CSS)和结构(HTML)藕合太紧 如果设计变动，需要更改CSS和HTML 创建了数千行CSS，但有可能这些CSS永远不会被使用。比如Twitter Bootstrap OOCSS 不是什么新技术，只是一种撰写 CSS 的设计模式，或者可以说是一种「道德规范」，大致上我觉得重点只有两个： 减少对 HTML 结构的依赖 增加 CSS class 重复性的使用 减少对 HTML 结构的依赖 1234567&lt;nav class=&quot;nav--main&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; 一般的导航栏写法，结构应该会像上面的 HTML 范例一样，如果要对那些a标签定义样式，CSS 的写法可能写成 .nav–main ul li a {}，这种写法先不管效能上的问题，可以看出来过度地依赖元素标签的结构，有可能之后 HTML 结构改变，这个 CSS 就必须跟著重构，造成维护上多余的成本。 若从这个例子来考量，原则上 a都一定会接在 li 标签的后面，一个 li 只会有一个 a，通常不会独立存在，那就可以写成 .nav–main a {}，会是比较好的写法，甚至是直接给 a 加上 class nav–main_item。后者是 OOCSS 所提倡的用法。 增加 CSS class 的重复使用在 OOCSS 的观念中，强调重复使用 class，而应该避免使用 id 作为 CSS 的选择器。这种想法就是像OOP尽量抽离重复的程式码，例如以下这个例子，这是两种按钮的 CSS 样式属性： 1234567.button &#123; display: inline-block; padding: 6px 12px; color: hsla(0, 100%, 100%, 1); &amp;.button-default &#123; background: hsla(180, 1%, 28%, 1); &#125; &amp;.button-primary &#123; background: hsla(208, 56%, 53%, 1); &#125;&#125; 上面的 CSS 将两种不同样式的 button，抽离出重复的部份，并且定义在同个 class 上。因此，要使用这样的样式，HTML 的写法可能长这个样子： 12&lt;a class=&quot;button button-default&quot;&gt;&lt;a class=&quot;button button-primary&quot;&gt; 先用 button 宣告此为一个按钮的样式，再用 button-default 或 button-primary 作为按钮底色的区别。这么做可以维护成本变得比较低，例如：想要改网站上所有按钮的大小，就只要修改 .button 的 padding 而已。 SMACSSSMACSS 的概念仅限于它对 CSS 不同的业务逻辑所做的划分方式 BaseBase 就是设定标签元素的预设值，例如浏览器的 reset 可以写在这里，如果用的是 Compass，只要 @include global-reset 即可。这里只会对标签元素本身做设定，不会出现任何 class 或id，但是可以有属性选择器或是伪类： 123html &#123;&#125;input[type=text] &#123;&#125;a:hover &#123;&#125; LayoutLayout 是指整个网站的「大架构」的外观，而非 .button 这种小元件的 class。网站通常会有一些主要的大区块，可能是 header 或 footer，Layout 就是用来定义这些「大架构」的 CSS。如果有做 Responsive Web Design 或是用 Grid System，也是把规则写在 Layout 这里。 123456#header &#123; margin: 30px 0; &#125;#articles-wrapper &#123; ......; &#125;.sidebar &#123; &amp;.sidebar--right &#123; ......; &#125; &amp;.sidebar-left &#123; ......; &#125;&#125; 通常只有一个选择器，一个 id、或一个 class Module 原本的 SMACSS 对 Module 的设计我觉得不是很好，所以我硬是将 Module 拆分出一个 Partial。 这里的 Module 顾名思义，就是可以在其他地方被重复使用，如果要找更明确的例子，我想就像 Twitter Bootstrap 的 Components一样，或者像前面 OOCSS 所举例的 .button 这种会被重复使用的元件模组。 模组不需要用任何的 prefix，因为 Module 就是设计来可以重复应用在不同的 page 上。 Partial Partial 跟 Latout 不同，也跟 Module 不同，他比 Layout 的范围小，可能是 header 底下的某个子元素。他不像 Module，他是特定单一领域下特别的设定。 123.nav--main &#123; a &#123; ......; &#125;&#125; 通常会将 Partial 的名称加在子 class 作为 prefix，例如 .nav–main 底下的.nav–main_item。 State State 负责定义元素不同的状态下，所呈现的样式。但是并非指一个元素的 :hover 或 :active 下的状态。举例来说，一个导航栏分页，目前所在页面的分页需要加上 .active的属性表示目前位置是在这个分页，HTML 会长这样： 1234567&lt;nav class=&quot;nav--main&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;active&quot;&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a&gt;.........&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; 因此可以替 .nav–main 增加 .active 这样的子 class： 123456.nav--main &#123; // others…; .active &#123; background: darken($background-color, 16%); &#125;&#125; Theme Theme 是画面上所有「皮肤」的定义，例如 border-color、background-image 或是 font-family 等相关的 Typography 设定。为什么说是「皮肤」？因为有些元件模组仍然是留在 Module 去定义，Theme 就像 Layout 一样负责「大架构」上的视觉样式。","categories":[],"tags":[]},{"title":"","slug":"严格相等运算符“===”","date":"2017-03-22T06:33:58.000Z","updated":"2017-03-22T06:33:58.000Z","comments":true,"path":"2017/03/22/严格相等运算符“===”/","link":"","permalink":"http://yoursite.com/2017/03/22/严格相等运算符“===”/","excerpt":"","text":"严格相等运算符“===” 如果俩个值类型不同，则它们不相等 如果2个值都是null或者都是underfined，则它们不等 如果2个值都是布尔值true或者都是布尔值false，则它们不等 如果其中一个的值是NaN，或者两个值都是NaN，则它们不等。NaN和其他任何值都是不等的，包括它本身！通过x！==x来判断是否为NaN，只有在x为NaN的时候，这个表达式的值才为true 如果两个值为数字且数值相等，则它们相等。如果一个值为0，另一个值为-0，则它们同样相等 如果两个值为字符串，且所含的对应位上的16位数完全相等，则它们相等。如果它们长度或内容不同，则它们不等。两个字符串可能含义完全不一样且所显示出的字符也一样，单具有不同编码的16位值。javascript并不对Unicode进行标准化的转换，因此像这样的字符串通过“===”和“==”运算符的比较结果也不相等。第三部分的String.localCompare（）提供了另外一种比较字符串的方法。 如果两个引用值指向同一个对象、数组、或函数，则它们是相等的。如果指向不同的对象，则它们是不等的，尽管两个对象具有完全一致的属性。","categories":[],"tags":[]},{"title":"","slug":"字符串调用方法","date":"2017-03-17T07:56:07.000Z","updated":"2017-03-17T07:56:07.000Z","comments":true,"path":"2017/03/17/字符串调用方法/","link":"","permalink":"http://yoursite.com/2017/03/17/字符串调用方法/","excerpt":"","text":"1var s=&quot;hello,world&quot; 定义一个字符串 1s.charAt(0) h:第一个字符串 1s.charAt(s.length-1) d:最后一个字符串 1s.substring(1,4) ell 第2~4个字符串 1s.slice(1,4) 同上 1s.slice(-3) rld 截取后三位 1s.indexOf(&quot;l&quot;) 2 l首次出现的位置 1s.lastIndexOf(&quot;l&quot;) 10 字符串l最后一次出现的位置 1s.indexOf(&quot;l&quot;,3) 3 在位置3及之后首次出现字符l的位置 1s.split(&quot;,&quot;) [“hello”,”world”]分割成字符串 1s.replace(&quot;h&quot;,&quot;H&quot;) “Hello，world”：全文字符串替换 1s.toUpperCase() “HEELO,WORLD”:全文大写 可以使用方括号的方法来访问字符串的单个字符s=”hello,world”;s[0] “h”","categories":[],"tags":[]},{"title":"","slug":"javascript中math对象的属性定义的函数和常量","date":"2017-03-17T06:39:35.000Z","updated":"2017-03-17T06:39:35.000Z","comments":true,"path":"2017/03/17/javascript中math对象的属性定义的函数和常量/","link":"","permalink":"http://yoursite.com/2017/03/17/javascript中math对象的属性定义的函数和常量/","excerpt":"","text":"1Math.pow(2,53) //=&gt; 9007199254740992 2的53次幂 1Math.round(.6) // =&gt; 1.0 四舍五入 1Math.ceil(.6) // =&gt; 1.0 向上求整 1Math.floor(.6) // =&gt; 0 向上求整 1Math.abs(-5) // =&gt; 5 求绝对值 1Math.max(x,y,z) // =&gt; 返回最大值 1Math.min(x,y,z) // =&gt; 返回最小值 1Math.random() // =&gt; 生成一个大于0小于1.0的伪随机数 1Math.PI // =&gt; π，圆周率 1Math.E // =&gt; e 自然对数的底数 1Math.sqrt(3) // =&gt; 3的平方根 1Math.pow(3,1/3) // =&gt; 3的立方根 1Math.sin(0) // =&gt; 三角函数：还有Math.cos,Math.tan等 1Math.log(0) // =&gt; 10的自然对数 1Math.log(100)/Math.LN10 // =&gt; 以10为底100的对数 1Math.log(512)/Math.LN2 // =&gt; 以2为底512的对数 1Math.exp(3) // =&gt; e的三次幂","categories":[],"tags":[]},{"title":"","slug":"vue.js","date":"2017-03-17T06:21:04.000Z","updated":"2017-03-17T06:21:04.000Z","comments":true,"path":"2017/03/17/vue.js/","link":"","permalink":"http://yoursite.com/2017/03/17/vue.js/","excerpt":"","text":"vue.js笔记1、轻量级的mvvm框架，同时吸收了angular和react的优点 2、安装vue环境，具体可参考vue官网1） 命令行安装在终端 sudo npm install -g vue-cli2) 安装完成后创建一个基于 webpack 模板的新项目 1sudo vue init webpack my-project(my-project为项目的名称) 会发现我们电脑多了一个my-project的文件夹3） cd my-project 进入到该项目的根目录 1sudo npm install 安装项目的依赖，会发现这个文件夹里面多了node_moudles这个文件夹4）npm run dev 让整个项目跑起来，在浏览器输入localhost:8080,会打开vue.js的初始页跑的时候发生错误，vue和vue-template-compiler 版本不一致，打开vue-template-compiler文件夹的packagk.json文件夹，修改里面的版本号，修改和vue版本号一致 3、vue所有的数据放在data里面，data里面也是对象的形式，进行双向数据绑定 4、new一个vue对象的时候可以设置它的属性，其中最重要的包括3个，分别是data，methods,watch其中data代表vue对象数据，methods代表vue对象的方法，watch设置了对象的监听的方法。vue对象里面的设置通过html指令进行关联重要的指令包括v-text 渲染数据v-if 控制显示v-on 绑定事件v-for 循环渲染 5、","categories":[],"tags":[]},{"title":"","slug":"grunt","date":"2017-03-08T08:04:23.000Z","updated":"2017-03-08T08:04:23.000Z","comments":true,"path":"2017/03/08/grunt/","link":"","permalink":"http://yoursite.com/2017/03/08/grunt/","excerpt":"","text":"用grunt搭建自动化前端教程1、安装node.js 2、安装grunt-CLI把grunt-cli安装到全局变量 sudu npm install -g grunt-cli验证grunt是否安装成功，在命令行输入grunt，出现以下结果即可 3、创建一个简单的网站 1）Grunt是应用于实际项目的，所以我们得有一个简单的测试网站来演示grunt的安装、使用。 2）首先创建一个“grunt_test”文件夹，里面建了三个空文件夹、两个空文档。（注意 Gruntfile.js 文件的首字母大写！） 3）给package.json里面添加内容，按Json格式写 很简单，我们把这个网站或系统的名称、版本写了一下。 “devDependencies”字面意思解释是“开发依赖项”，即我们现在这个系统，将会依赖于哪些工具来开发。 另外，其实package.json中你可以增加任何符合json格式的代码，它生来自由，仅仅受json代码格式的限制。 4、安装grunt在grunt_text目录下面安装grunt 1sudo npm install grunt --save-dev 这里需要解释的是，“—save-dev”的意思是，在当前目录安装grunt的同时，顺便把grunt保存为这个目录的开发依赖项。看到“开发依赖项”这一次，是不是觉得有些眼熟？上文在配置package.json时，其中的“devDependencies”中就会存储开发依赖项。 具体保存为开发依赖项是一个什么效果？动手安装一下就是了。首先，在运行安装grunt的命令之前，package.json中的“devDependencies”对应的是空对象。 现在我们来运行这行命令。你会看到几条warning提示，不用管它。然后接下来就是加载状态，一个旋转的小横线。稍等待一会儿，会提示你安装成功。安装成功后打开package.json文件就会发现里面的devDependencies后面添加了东西然后看grunt_text文件夹下面多了node_modules文件夹，这个文件夹下面存放的我们下载好的grunt文件 5、配置Gruntfile.js 6、Grunt插件介绍进入grunt官网的插件列表页面 grunt，我们能看到grunt到目前位置的所有插件。现在里面有4560个插件，这个数量每天都在增加。而且，这些既然出现在官网，肯定是经过审核的。 插件分为两类。第一类是grunt团队贡献的插件，这些插件的名字前面都带有“contrib-”前缀，而且在插件列表中有星号标注。第二类是第三方提供的插件，不带有这两个特征。 和jquery一样，插件那么多，肯定不会全部用。grunt官网插件列表的前几个插件中的前几个插件，下载量最多，它们肯定是大家都在用的插件。第一名jshint插件最近30天下载量将近89万次，这是多么惊人的下载量！ Contrib-jshint——javascript语法错误检查； Contrib-watch——实时监控文件变化、调用相应的任务重新执行； Contrib-clean——清空文件、文件夹； Contrib-uglify——压缩javascript代码 Contrib-copy——复制文件、文件夹 Contrib-concat——合并多个文件的代码到一个文件中 karma——前端自动化测试工具 以上这些插件，本文不会全部讲到。但是随着讲解其中的一部分，我想你就能掌握使用grunt插件的方法。知道方法了，然后你就可以参考官方文档去使用你想要的插件。 7、使用uglify插件（压缩javascript代码）Uglify插件的功能就是压缩javascript代码。 1sudo npm install grunt-contrib-uglify --save-dev 然后配置Gruntfile.js第一步，在grunt.initConfig方法中配置 uglify 的配置参数。 12345678910uglify:&#123; options:&#123; stripBanners:true, banner:&apos;/*! &lt;%=pkg.name%&gt;-&lt;%pkg.version%&gt;.js&lt;%=grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&apos; &#125;, build:&#123; src:&apos;src/test.js&apos;, dest:&apos;bulid/&lt;%pkg.name%&gt;-&lt;%=pkg.version%&gt;.js.min.js&apos; &#125; &#125; 第二步，在 grunt.initConfig 方法之后，要让grunt去加载这一个插件。 1grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;); 第三步，在grunt命令执行时，要不要立即执行uglify插件？如果要，就写上，否则不写。我现在是需要的，所以我写上。 1grunt.registerTask(&apos;default&apos;,[&apos;uglify&apos;); 然后再build文件夹里面就可以看到压缩后的js文件 8、使用watch插件（真正实现自动化）配置Gruntfile.js 1234567watch:&#123; build:&#123; files:[&apos;src/*.js&apos;,&apos;css/*.js&apos;], tasks:[&apos;jshint&apos;,&apos;uglify&apos;], options:&#123;spawn:false&#125; &#125; &#125; 1grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;); 1grunt.registerTask(&apos;default&apos;,[&apos;uglify&apos;,&apos;watch&apos;]); 运行grunt命令，控制台提示watch已经开始监听。此时要想停止，按ctrl + c即可。 9、批量安装插件到现在为止，我刚刚安装了2个插件，“node_modules”文件夹所占据的空间就有18MB了。上传代码到开发库的时候，不上传node_modules这里面所有的文件。 问题又来了，我如果作为开发环境的搭建者，我不把“node_modules”上传，其他一起开发的人，怎么得到这些grunt插件和工具呢？有人回答让他们自己去手动一个一个安装——首先这是一个笨方法，其次如果我当年安装的旧版本，而他们现在自己安装的可能是新版本。新旧有可能不兼容啊。 该怎么办？ 其实答案很简单——我上传源码时候，肯定会把package.json上传上去，而package.json中的“devDependencies”就记录了这个系统的开发依赖项，然后我通过nodejs的npm即可批量安装。 做一个试验。我在D盘下面新建一个目录“grunt_test_1”，然后把“grunt_test”中的package.json拷过去。在打开命令行跳转到“grunt_test_1”，执行“npm install”命令 此时按回车执行命令，结果在“grunt_test_1”生成了“node_modules”文件夹，里面安装好了package.json中“devDependencies”配置的插件。而且，版本都是一直的。","categories":[],"tags":[]},{"title":"","slug":"添加评论","date":"2017-03-07T09:22:03.000Z","updated":"2017-03-07T09:22:03.000Z","comments":true,"path":"2017/03/07/添加评论/","link":"","permalink":"http://yoursite.com/2017/03/07/添加评论/","excerpt":"","text":"给hexo添加评论功能1、进入多说多说 2、注册多说账户 3、点击我要创建 4、根据要求填写信息 5、在 theme/yilia/layout/_partial/post/目录下创建文件名叫：duoshuo.ejs（ps:我的是系统直接创建的，如果有可以省略） 6、把下面的代码复制进去 123456789101112131415161718&lt;div class=&quot;duoshuo&quot;&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%=key%&gt;&quot; data-title=&quot;&lt;%=title%&gt;&quot; data-url=&quot;&lt;%=url%&gt;&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt;&lt;/div&gt; 7、在 hexo/_comfig.yml 里边添加一下代码 1duoshuo_shortname: xxxx(冒号后有空格 名字是多说上面的用户名) 8、最后在 theme/yilia/_config.yml 里边添加以下代码（名字换成自己的） 12duoshuo: trueshort_name: xxxx #名字换你自己在多说后台的名字(冒号后有空格) 最后提交便可以看到评论啦","categories":[],"tags":[]},{"title":"","slug":"添加音乐","date":"2017-03-07T09:14:39.000Z","updated":"2017-03-07T09:14:39.000Z","comments":true,"path":"2017/03/07/添加音乐/","link":"","permalink":"http://yoursite.com/2017/03/07/添加音乐/","excerpt":"","text":"hexo 添加网易云音乐1、进入网易云音乐官网网易 2、到我的主页查看我的歌单 3、点击你的任意一个歌单进入（前提你有创建好的歌单） 4、点击生成外链播放器 5、选择你想要的尺寸，复制下面的html代码 6、最后打开（themes/yilia/layout/_partial/left-col.ejs）(你喜欢放在那里自己选择)把复制好的网易云音乐放到第二行里边大功告成！","categories":[],"tags":[]},{"title":"","slug":"修改主题","date":"2017-03-07T08:54:52.000Z","updated":"2017-03-07T08:54:52.000Z","comments":true,"path":"2017/03/07/修改主题/","link":"","permalink":"http://yoursite.com/2017/03/07/修改主题/","excerpt":"","text":"如何更改hexo的主题1、进入到当前hexo的根目录 1git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia 2、在./_config.yml，修改主题为yiliatheme: yilia 还有好多主题，换的方法都一样 3、在终端$ hexo s -g 在本地浏览效果 1$ hexo d -g 上传到github上","categories":[],"tags":[]},{"title":"","slug":"hexo","date":"2017-03-07T08:45:30.000Z","updated":"2017-03-07T08:45:30.000Z","comments":true,"path":"2017/03/07/hexo/","link":"","permalink":"http://yoursite.com/2017/03/07/hexo/","excerpt":"","text":"如何用hexo+github搭建博客本项目github地址：github一、环境安装1.下载node.js(node.js) 2.git 3.hexo1）打开mac系统终端2）输入安装hexo的代码(此处安装时有可能会提示输入系统管理员密码)$ sudo npm install -g hexo（mac环境下）二、hexo创建静态博客1.自己在本地新建文件夹，该文件夹为博客的初始文件夹 2.在终端进入该文件夹，初始化博客cd 文件夹路径，进入该文件夹后执行 $ hexo init命令 上述完成后，生成原始文件；这个新建的文件夹就是博客的根目录 本地查看：启用本地服务命令(退出按ctrl+c) $ hexo s 将出现的地址输入浏览器，即可查看到本地效果 三、github配置 注册github账号并登陆 获取本机的SSH口令 1）输入获取代码，回车直到出现图片所示图形为止 $ ssh-keygen 2）输入编译代码 $ vim ~/.ssh/id_rsa.pub3）出现SSH口令后，复制，并在下方输入:q，随后按下回车可以退出该窗口(ps:复制时一定要将红框圈住的一起复制)4）进入到github页面设置SSH口令 点击用户下拉菜单中的settings（step1) 点击左侧的SHH and GPG keys（step2) 在Title中输入口令名称（随意）（step3) 在key中贴上SSH口令（step4) 创建新的仓库 1）创建新的仓库（repOSitory） 点击用户左侧的+号菜单中的New repOSitory（step1) 在repOSitory name中输入二级域名，格式请严格遵照username.github.io（step2) ps：username填写github的登录用户名，否则上线的时候会报错 是否公开选项可以选取Public（step3) 勾选step4处，会自动生成一份可编辑的README.md文件（建议勾选）（step4) 点击create repOSitory生成仓库完毕（step5) 2）查看新建的仓库（repOSitory） 可以回到github个人首页点击右侧的仓库区 进入后在step1处选择并复制http地址，注意此时step2处应该是空的四、发布博客 设置blog配置文件 1）打开blog文件夹下的_config.yml文件 2）找到最下方的type，输入git（注意冒号后面是带空格的） 3）repo行可能没有，需要自己输入，后面跟上github上仓库中复制的http地址（注意此时1、2两处应该是一样的username），不然上传时会报错 4）其他博客设置 title：博客名称 subtitle：博客副标题 description：博客描述 author：作者 language：语言（简体中文是zh-CN） 在终端上传博客 1）进入终端，输入git上传插件安装代码（安装时会提示输入github用户名及密码） $ npm install hexo-deployer-git –save2）安装完毕后，输入获取代码$ hexo g3）最后输入上传代码$ hexo d4）重新在github仓库查看上传文件，此时在step2中会有之前bolg中生成的文件5）step3处就是你的博客地址","categories":[],"tags":[]},{"title":"","slug":"如何上传文章","date":"2017-03-07T08:43:10.000Z","updated":"2017-03-07T08:43:10.000Z","comments":true,"path":"2017/03/07/如何上传文章/","link":"","permalink":"http://yoursite.com/2017/03/07/如何上传文章/","excerpt":"","text":"如何在hexo上发表文章1、使用一些在线的markdown编辑器，比如csdn提供的下载地址2、将写好的文章导出到本地（ps:导出格式为.md）3、将导出的文件放到hexo根文件夹下的source/_posts下，这里面主要放写好的文章，格式都为.md4、在终端进入到当前hexo跟文件夹下 $ hexo s -g 在本地浏览效果，如果满意 $ hexo d -g同时上传到github上面，ok一篇文章就上传ok了。","categories":[],"tags":[]}]}