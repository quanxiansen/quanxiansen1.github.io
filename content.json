{"meta":{"title":"YOLO","subtitle":"You Only Live Once","description":"You Only Live Once","author":"yolo","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"grunt","date":"2017-03-08T08:04:23.000Z","updated":"2017-03-08T08:04:23.000Z","comments":true,"path":"2017/03/08/grunt/","link":"","permalink":"http://yoursite.com/2017/03/08/grunt/","excerpt":"","text":"用grunt搭建自动化前端教程1、安装node.js 2、安装grunt-CLI把grunt-cli安装到全局变量 sudu npm install -g grunt-cli验证grunt是否安装成功，在命令行输入grunt，出现以下结果即可 3、创建一个简单的网站 1）Grunt是应用于实际项目的，所以我们得有一个简单的测试网站来演示grunt的安装、使用。 2）首先创建一个“grunt_test”文件夹，里面建了三个空文件夹、两个空文档。（注意 Gruntfile.js 文件的首字母大写！） 3）给package.json里面添加内容，按Json格式写 很简单，我们把这个网站或系统的名称、版本写了一下。 “devDependencies”字面意思解释是“开发依赖项”，即我们现在这个系统，将会依赖于哪些工具来开发。 另外，其实package.json中你可以增加任何符合json格式的代码，它生来自由，仅仅受json代码格式的限制。 4、安装grunt在grunt_text目录下面安装grunt 1sudo npm install grunt --save-dev 这里需要解释的是，“—save-dev”的意思是，在当前目录安装grunt的同时，顺便把grunt保存为这个目录的开发依赖项。看到“开发依赖项”这一次，是不是觉得有些眼熟？上文在配置package.json时，其中的“devDependencies”中就会存储开发依赖项。 具体保存为开发依赖项是一个什么效果？动手安装一下就是了。首先，在运行安装grunt的命令之前，package.json中的“devDependencies”对应的是空对象。 现在我们来运行这行命令。你会看到几条warning提示，不用管它。然后接下来就是加载状态，一个旋转的小横线。稍等待一会儿，会提示你安装成功。安装成功后打开package.json文件就会发现里面的devDependencies后面添加了东西然后看grunt_text文件夹下面多了node_modules文件夹，这个文件夹下面存放的我们下载好的grunt文件 5、配置Gruntfile.js 6、Grunt插件介绍进入grunt官网的插件列表页面 grunt，我们能看到grunt到目前位置的所有插件。现在里面有4560个插件，这个数量每天都在增加。而且，这些既然出现在官网，肯定是经过审核的。 插件分为两类。第一类是grunt团队贡献的插件，这些插件的名字前面都带有“contrib-”前缀，而且在插件列表中有星号标注。第二类是第三方提供的插件，不带有这两个特征。 和jquery一样，插件那么多，肯定不会全部用。grunt官网插件列表的前几个插件中的前几个插件，下载量最多，它们肯定是大家都在用的插件。第一名jshint插件最近30天下载量将近89万次，这是多么惊人的下载量！ Contrib-jshint——javascript语法错误检查； Contrib-watch——实时监控文件变化、调用相应的任务重新执行； Contrib-clean——清空文件、文件夹； Contrib-uglify——压缩javascript代码 Contrib-copy——复制文件、文件夹 Contrib-concat——合并多个文件的代码到一个文件中 karma——前端自动化测试工具 以上这些插件，本文不会全部讲到。但是随着讲解其中的一部分，我想你就能掌握使用grunt插件的方法。知道方法了，然后你就可以参考官方文档去使用你想要的插件。 7、使用uglify插件（压缩javascript代码）Uglify插件的功能就是压缩javascript代码。 1sudo npm install grunt-contrib-uglify --save-dev 然后配置Gruntfile.js第一步，在grunt.initConfig方法中配置 uglify 的配置参数。 12345678910uglify:&#123; options:&#123; stripBanners:true, banner:&apos;/*! &lt;%=pkg.name%&gt;-&lt;%pkg.version%&gt;.js&lt;%=grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&apos; &#125;, build:&#123; src:&apos;src/test.js&apos;, dest:&apos;bulid/&lt;%pkg.name%&gt;-&lt;%=pkg.version%&gt;.js.min.js&apos; &#125; &#125; 第二步，在 grunt.initConfig 方法之后，要让grunt去加载这一个插件。 1grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;); 第三步，在grunt命令执行时，要不要立即执行uglify插件？如果要，就写上，否则不写。我现在是需要的，所以我写上。 1grunt.registerTask(&apos;default&apos;,[&apos;uglify&apos;); 然后再build文件夹里面就可以看到压缩后的js文件 8、使用watch插件（真正实现自动化）配置Gruntfile.js 1234567watch:&#123; build:&#123; files:[&apos;src/*.js&apos;,&apos;css/*.js&apos;], tasks:[&apos;jshint&apos;,&apos;uglify&apos;], options:&#123;spawn:false&#125; &#125; &#125; 1grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;); 1grunt.registerTask(&apos;default&apos;,[&apos;uglify&apos;,&apos;watch&apos;]); 运行grunt命令，控制台提示watch已经开始监听。此时要想停止，按ctrl + c即可。 9、批量安装插件到现在为止，我刚刚安装了2个插件，“node_modules”文件夹所占据的空间就有18MB了。上传代码到开发库的时候，不上传node_modules这里面所有的文件。 问题又来了，我如果作为开发环境的搭建者，我不把“node_modules”上传，其他一起开发的人，怎么得到这些grunt插件和工具呢？有人回答让他们自己去手动一个一个安装——首先这是一个笨方法，其次如果我当年安装的旧版本，而他们现在自己安装的可能是新版本。新旧有可能不兼容啊。 该怎么办？ 其实答案很简单——我上传源码时候，肯定会把package.json上传上去，而package.json中的“devDependencies”就记录了这个系统的开发依赖项，然后我通过nodejs的npm即可批量安装。 做一个试验。我在D盘下面新建一个目录“grunt_test_1”，然后把“grunt_test”中的package.json拷过去。在打开命令行跳转到“grunt_test_1”，执行“npm install”命令 此时按回车执行命令，结果在“grunt_test_1”生成了“node_modules”文件夹，里面安装好了package.json中“devDependencies”配置的插件。而且，版本都是一直的。","categories":[],"tags":[]},{"title":"","slug":"添加评论","date":"2017-03-07T09:22:03.000Z","updated":"2017-03-07T09:22:03.000Z","comments":true,"path":"2017/03/07/添加评论/","link":"","permalink":"http://yoursite.com/2017/03/07/添加评论/","excerpt":"","text":"给hexo添加评论功能1、进入多说多说 2、注册多说账户 3、点击我要创建 4、根据要求填写信息 5、在 theme/yilia/layout/_partial/post/目录下创建文件名叫：duoshuo.ejs（ps:我的是系统直接创建的，如果有可以省略） 6、把下面的代码复制进去 123456789101112131415161718&lt;div class=&quot;duoshuo&quot;&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%=key%&gt;&quot; data-title=&quot;&lt;%=title%&gt;&quot; data-url=&quot;&lt;%=url%&gt;&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt;&lt;/div&gt; 7、在 hexo/_comfig.yml 里边添加一下代码 1duoshuo_shortname: xxxx(冒号后有空格 名字是多说上面的用户名) 8、最后在 theme/yilia/_config.yml 里边添加以下代码（名字换成自己的） 12duoshuo: trueshort_name: xxxx #名字换你自己在多说后台的名字(冒号后有空格) 最后提交便可以看到评论啦","categories":[],"tags":[]},{"title":"","slug":"添加音乐","date":"2017-03-07T09:14:39.000Z","updated":"2017-03-07T09:14:39.000Z","comments":true,"path":"2017/03/07/添加音乐/","link":"","permalink":"http://yoursite.com/2017/03/07/添加音乐/","excerpt":"","text":"hexo 添加网易云音乐1、进入网易云音乐官网网易 2、到我的主页查看我的歌单 3、点击你的任意一个歌单进入（前提你有创建好的歌单） 4、点击生成外链播放器 5、选择你想要的尺寸，复制下面的html代码 6、最后打开（themes/yilia/layout/_partial/left-col.ejs）(你喜欢放在那里自己选择)把复制好的网易云音乐放到第二行里边大功告成！","categories":[],"tags":[]},{"title":"","slug":"修改主题","date":"2017-03-07T08:54:52.000Z","updated":"2017-03-07T08:54:52.000Z","comments":true,"path":"2017/03/07/修改主题/","link":"","permalink":"http://yoursite.com/2017/03/07/修改主题/","excerpt":"","text":"如何更改hexo的主题1、进入到当前hexo的根目录 1git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia 2、在./_config.yml，修改主题为yiliatheme: yilia 还有好多主题，换的方法都一样 3、在终端$ hexo s -g 在本地浏览效果 1$ hexo d -g 上传到github上","categories":[],"tags":[]},{"title":"","slug":"hexo","date":"2017-03-07T08:45:30.000Z","updated":"2017-03-07T08:45:30.000Z","comments":true,"path":"2017/03/07/hexo/","link":"","permalink":"http://yoursite.com/2017/03/07/hexo/","excerpt":"","text":"如何用hexo+github搭建博客本项目github地址：github一、环境安装1.下载node.js(node.js) 2.git 3.hexo1）打开mac系统终端2）输入安装hexo的代码(此处安装时有可能会提示输入系统管理员密码)$ sudo npm install -g hexo（mac环境下）二、hexo创建静态博客1.自己在本地新建文件夹，该文件夹为博客的初始文件夹 2.在终端进入该文件夹，初始化博客cd 文件夹路径，进入该文件夹后执行 $ hexo init命令 上述完成后，生成原始文件；这个新建的文件夹就是博客的根目录 本地查看：启用本地服务命令(退出按ctrl+c) $ hexo s 将出现的地址输入浏览器，即可查看到本地效果 三、github配置 注册github账号并登陆 获取本机的SSH口令 1）输入获取代码，回车直到出现图片所示图形为止 $ ssh-keygen 2）输入编译代码 $ vim ~/.ssh/id_rsa.pub3）出现SSH口令后，复制，并在下方输入:q，随后按下回车可以退出该窗口(ps:复制时一定要将红框圈住的一起复制)4）进入到github页面设置SSH口令 点击用户下拉菜单中的settings（step1) 点击左侧的SHH and GPG keys（step2) 在Title中输入口令名称（随意）（step3) 在key中贴上SSH口令（step4) 创建新的仓库 1）创建新的仓库（repOSitory） 点击用户左侧的+号菜单中的New repOSitory（step1) 在repOSitory name中输入二级域名，格式请严格遵照username.github.io（step2) ps：username填写github的登录用户名，否则上线的时候会报错 是否公开选项可以选取Public（step3) 勾选step4处，会自动生成一份可编辑的README.md文件（建议勾选）（step4) 点击create repOSitory生成仓库完毕（step5) 2）查看新建的仓库（repOSitory） 可以回到github个人首页点击右侧的仓库区 进入后在step1处选择并复制http地址，注意此时step2处应该是空的四、发布博客 设置blog配置文件 1）打开blog文件夹下的_config.yml文件 2）找到最下方的type，输入git（注意冒号后面是带空格的） 3）repo行可能没有，需要自己输入，后面跟上github上仓库中复制的http地址（注意此时1、2两处应该是一样的username），不然上传时会报错 4）其他博客设置 title：博客名称 subtitle：博客副标题 description：博客描述 author：作者 language：语言（简体中文是zh-CN） 在终端上传博客 1）进入终端，输入git上传插件安装代码（安装时会提示输入github用户名及密码） $ npm install hexo-deployer-git –save2）安装完毕后，输入获取代码$ hexo g3）最后输入上传代码$ hexo d4）重新在github仓库查看上传文件，此时在step2中会有之前bolg中生成的文件5）step3处就是你的博客地址","categories":[],"tags":[]},{"title":"","slug":"如何上传文章","date":"2017-03-07T08:43:10.000Z","updated":"2017-03-07T08:43:10.000Z","comments":true,"path":"2017/03/07/如何上传文章/","link":"","permalink":"http://yoursite.com/2017/03/07/如何上传文章/","excerpt":"","text":"如何在hexo上发表文章1、使用一些在线的markdown编辑器，比如csdn提供的下载地址2、将写好的文章导出到本地（ps:导出格式为.md）3、将导出的文件放到hexo根文件夹下的source/_posts下，这里面主要放写好的文章，格式都为.md4、在终端进入到当前hexo跟文件夹下 $ hexo s -g 在本地浏览效果，如果满意 $ hexo d -g同时上传到github上面，ok一篇文章就上传ok了。","categories":[],"tags":[]}]}